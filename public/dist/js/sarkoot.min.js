const aside = document.querySelector('#aside');
const asideBtn = document.querySelector('#aside-btn');
function handleAside(event) {
    aside.classList.add('open');
}
asideBtn.addEventListener('click', handleAside);

const profile = document.querySelector('.profile');
const dropdown = document.querySelector('.profile-dropdown');

function handleProfileClick(event) {
    dropdown.classList.add('open');
}

profile.addEventListener('click', handleProfileClick);
window.addEventListener('click', function(event) {
    if (!event.target.closest('.profile-div')) {
        dropdown.classList.remove('open');
    }
    if (!event.target.closest('#aside') && !event.target.closest('#aside-btn')) {
        aside.classList.remove('open');
    }
});

am4core.ready(function () {

    // Themes begin
    am4core.useTheme(am4themes_amcharts);
    // Themes end

    // Create chart instance
    var chart = am4core.create("chartdiv", am4charts.XYChart);

    chart.rtl = true;

    // Add data
    chart.data = [{
        "country": "USA",
        "visits": 2025
    }, {
        "country": "China",
        "visits": 1882
    }, {
        "country": "Japan",
        "visits": 1809
    }, {
        "country": "Germany",
        "visits": 1322
    }, {
        "country": "UK",
        "visits": 1122
    }, {
        "country": "France",
        "visits": 1114
    }, {
        "country": "India",
        "visits": 984
    }, {
        "country": "Spain",
        "visits": 711
    }, {
        "country": "Netherlands",
        "visits": 665
    }, {
        "country": "Russia",
        "visits": 580
    }, {
        "country": "South Korea",
        "visits": 443
    }, {
        "country": "Canada",
        "visits": 441
    }, {
        "country": "Brazil",
        "visits": 395
    }];

    // Create axes

    var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
    categoryAxis.dataFields.category = "country";
    categoryAxis.renderer.grid.template.location = 0;
    categoryAxis.renderer.minGridDistance = 30;

    categoryAxis.renderer.labels.template.adapter.add("dy", function (dy, target) {
        if (target.dataItem && target.dataItem.index & 2 == 2) {
            return dy + 25;
        }
        return dy;
    });

    var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

    // Create series
    var series = chart.series.push(new am4charts.ColumnSeries());
    series.dataFields.valueY = "visits";
    series.dataFields.categoryX = "country";
    series.name = "Visits";
    series.columns.template.tooltipText = "{categoryX}: [bold]{valueY}[/]";
    series.columns.template.fillOpacity = .8;

    var columnTemplate = series.columns.template;
    columnTemplate.strokeWidth = 2;
    columnTemplate.strokeOpacity = 1;

}); // end am4core.ready()

$(document).ready(function() {
    $('.select2').select2();
});
(function () {
    function jresp(context, res) {
        context.trigger('jresp', [res]);
        if (res.message) {
            if (toastr) {
                var toast = toastr[res.is_ok ? 'success' : 'error'](res.message_text || res.message, undefined, {
                    "closeButton": true,
                    "newestOnTop": true,
                    "positionClass": "toast-bottom-right"
                });
            } else if (iziToast) {
                iziToast[res.is_ok ? 'success' : 'error']({ message: res.message_text || res.message });
            }
        }
        if (res.redirect) {
            if (res.direct) {
                location.href = res.redirect;
            } else {
                new Statio({
                    url: res.redirect
                });
            }
        }
    }
    window.JResp = jresp;
})();
(function () {
    function lijax(context, onFire) {
        var back_value = $(context).val() || $(context).attr('data-value');
        if ($(context).is(':checkbox')) {
            back_value = $(context).is(':checked') ? 1 : 0;
        }
        var Timeout = null;
        var fire = null;
        if ($(context).is('form') && !$(context).attr('data-lijax')) {
            fire = ['submit'];
        } else {
            fire = $(context).attr('data-lijax').split(' ') || ['change'];
        }
        for (var i = 0; i < fire.length; i++) {
            if (/^\d+$/.test(fire[i])) {
                var Time = fire[i];
                $(context).on('keyup', function () {
                    if (Timeout) clearTimeout(Timeout);
                    Timeout = setTimeout(send, Time);
                });
            } else {
                $(context).on(fire[i], send);
            }
        }

        function send() {
            var href = url.parse(location.href);
            var name = $(context).attr('name') || $(context).attr('data-name');
            if (href.get && href.get[name]) {
                delete href.get[name];
            }
            var get = url.buildget(href.get);
            href = href.url.replace(/\?(.*)$/, get ? '?' + get : '');
            var action = $(context).attr('href') || $(context).attr('action') || $(context).attr('data-action') || href;
            var method = $(context).attr('data-method') || $(context).attr('method') || 'GET';
            var state = $(context).attr('data-state');
            var value = undefined;
            if ($(context).is('form')) {
                var Data = new FormData(context);
                var data = {};
                if ($(context).attr('enctype') == 'multipart/form-data' || $('input:file', context).length) {
                    data = Data;
                } else {
                    Data.forEach(function (value, name) {
                        data[name] = /\[.*\]$/.test(name) ? Data.getAll(name) : Data.get(name);
                    });
                }
                state = false;
                $(context).addClass('lijax-sending');
                $('input, select, textarea, button', context).not(':disabled').addClass('lijax-disable').attr('disabled', 'disabled');
                $(context).on('statio:done', function () {
                    $('.lijax-disable', this).removeClass('lijax-disable').removeAttr('disabled');
                    $(this).removeClass('lijax-sending');
                });
            } else {
                value = $(context).val() || $(context).attr('data-value') || null;
                if ($(context).is(':checkbox')) {
                    value = $(context).is(':checked') ? 1 : 0;
                }
                if (back_value == value && $(context).is('input, textarea, select') && !onFire) return;
                back_value = value;
                var data = {};
                data[name] = value;
            }
            if ($(context).attr('data-query')) {
                var action_query = url.parse(action);
                var data_query = url.parse('?' + $(context).attr('data-query'));
                action_query.get = $.extend(null, action_query.get || {}, data_query.get);
                action = url.build(action_query);
            }
            var headers = {};
            if ($(context).attr('data-xhrBase')) {
                headers = {
                    'Data-xhr-base': $(context).attr('data-xhrBase')
                };
            }
            new Statio({
                type: state ? 'both' : 'render',
                context: context,
                ajax: {
                    contentType: $(context).is('form') && ($(context).attr('enctype') == 'multipart/form-data' || $('input:file', context).length) ? false : 'application/x-www-form-urlencoded; charset=UTF-8',
                    processData: $(context).is('form') && ($(context).attr('enctype') == 'multipart/form-data' || $('input:file', context).length) ? false : true,
                    cache: false,
                    method: method,
                    data: data,
                    headers: headers
                },
                url: action
            });
            return false;
        }
        if (onFire) {
            send();
        }
    }
    window.Lijax = lijax;
})();
(function () {
    var _globals = {
        title: function (value) {
            $('title').html(value);
        }
    };

    var _ajax = {
        type: 'GET',
        cache: false
    };

    var _options = {
        object: null,
        title: null,
        ajax: _ajax,
        /**
         * Send request and change url with response rendering
         * @default both
         * both: change url and render response
         * url: Only send request and chage url without change rendering
         * render: Only send request and render repsonse without change url
         * @type {String}
         */
        type: 'both',
        /**
         * dont send any request
         * @type {Boolean}
         */
        fake: false,
        /**
         * ajax response contetnt
         * if {fake:true} or {response : notnull} response render this property
         * @type {[type]}
         */
        response: null,
        /**
         * replace state
         * @type {Boolean}
         */
        replace: false,
        /**
         * event context
         * @type {DOM} {jQuery} {Selector string}
         */
        context: document
    };

    function statio(custom) {
        if (typeof custom != 'object') {
            custom = {};
        }

        custom.ajax = $.extend({}, _ajax, custom.ajax);
        custom.ajax.url = custom.url;
        custom.globals = $.extend({}, _globals, custom.globals);
        var options = $.extend({}, _options, custom);

        var response = {
            body: options.response,
            data: {}
        };

        if (!(options.context instanceof jQuery)) {
            options.context = $(options.context);
        }

        $(document).trigger('statio:global:init', [options.context]);
        options.context.trigger('statio:init');

        var ajax_data = null;
        var ajax_send_url = null;
        if (!options.fake) {
            if (!options.ajax.complete) {
                options.ajax.complete = ajx_complete;
            }
            var beforeSend = options.ajax.beforeSend;
            options.ajax.beforeSend = function (jqXHR, settings) {
                ajax_data = this;
                ajax_send_url = this.url;
                var urlx = url.parse(ajax_send_url);
                if (urlx.get && urlx.get._) {
                    delete urlx.get._;
                }
                var get = url.buildget(urlx.get);
                ajax_send_url = urlx.url.replace(/\?(.*)$/, get ? '?' + get : '');
                beforeSend ? beforeSend.call(this, jqXHR, settings) : null;
            };
            $.ajax(options.ajax);
        } else if (options.type != 'url' && response.body) {
            response_parse();
            render();
            $(document).trigger('statio:global:done', [options.context]);
            options.context.trigger('statio:done');
        } else {
            $(document).trigger('statio:global:done', [options.context]);
            options.context.trigger('statio:done');
        }

        function ajx_complete(jqXHR, textStatus) {
            if (jqXHR.responseJSON) {
                response.data = jqXHR.responseJSON;
                $(document).trigger('statio:global:jsonResponse', [options.context, jqXHR.responseJSON, jqXHR]);
                options.context.trigger('statio:jsonResponse', [jqXHR.responseJSON, jqXHR]);
                new JResp(options.context, response.data);
            } else {
                response.body = jqXHR.responseText;
                response_parse();
                if (textStatus == 'success') {
                    if (options.type != 'render') {
                        try {
                            options.replace ? history.replaceState(options.data, options.title, ajax_send_url || options.url) : history.pushState(options.data, options.title, ajax_send_url || options.url);
                        } catch (e) {
                            console.error(e);
                        }
                    }
                    $(document).trigger('statio:global:success', [options.context, response.data, response.body, jqXHR]);
                    options.context.trigger('statio:success', [response.data, response.body, jqXHR]);
                    if (options.type != 'url') {
                        render();
                    }
                } else {
                    $(document).trigger('statio:global:errorResponse', [options.context, response.data, response.body, jqXHR]);
                    options.context.trigger('statio:errorResponse', [response.data, response.body, jqXHR]);
                }
            }
            $(document).trigger('statio:global:done', [options.context, response.data, response.body, jqXHR]);
            options.context.trigger('statio:done', [response.data, response.body, jqXHR]);
        }

        function response_parse() {
            if (typeof response.body == 'string') {
                try {
                    var split = response.body.split("\n");
                    response.data = JSON.parse(split[0]);
                    response.body = split.length > 1 ? $($.parseHTML(split.splice(1).join(""))) : null;
                } catch (e) {
                    response.body = $($.parseHTML(response.body));
                }
            } else if (typeof response.body == 'object' && response.body != null) {
                if (response.body instanceof HTMLElement) {
                    response.body = $(response.body);
                } else if (response.body instanceof jQuery) {} else {
                    response.data = response.body;
                    response.body = null;
                }
            }
        }

        function render() {
            for (D in response.data) {
                if (options.globals[D]) {
                    options.globals[D](response.data[D]);
                }
            }
            if (response.body) {
                var changed = [];
                response.body.each(function () {
                    var base = $(this).attr('data-xhr');
                    if (base) {
                        changed.push($("[data-xhr='" + base + "']"));
                        $("[data-xhr='" + base + "']").html($(this).html());
                    }
                });
                $(document).trigger('statio:global:renderResponse', [$(changed), options.context, response.data, response.body]);
                options.context.trigger('statio:renderResponse', [$(changed), response.data, response.body]);
            }
        }
        return this;
    }
    window.Statio = statio;
    /**
     * for new chrome bug
     */
    new Statio({
        url: location.href,
        fake: true,
        replace: true
    });

    /**
     * popstate event
     */
    window.onpopstate = function (event) {
        new Statio({
            url: location.href,
            replace: true
        });
    };
})();

// Copyright 2013-2014 Kevin Cox

/*******************************************************************************
*                                                                              *
*  This software is provided 'as-is', without any express or implied           *
*  warranty. In no event will the authors be held liable for any damages       *
*  arising from the use of this software.                                      *
*                                                                              *
*  Permission is granted to anyone to use this software for any purpose,       *
*  including commercial applications, and to alter it and redistribute it      *
*  freely, subject to the following restrictions:                              *
*                                                                              *
*  1. The origin of this software must not be misrepresented; you must not     *
*     claim that you wrote the original software. If you use this software in  *
*     a product, an acknowledgment in the product documentation would be       *
*     appreciated but is not required.                                         *
*                                                                              *
*  2. Altered source versions must be plainly marked as such, and must not be  *
*     misrepresented as being the original software.                           *
*                                                                              *
*  3. This notice may not be removed or altered from any source distribution.  *
*                                                                              *
*******************************************************************************/

+function () {
    "use strict";

    var array = /\[([^\[]*)\]$/;

    /// URL Regex.
    /**
     * This regex splits the URL into parts.  The capture groups catch the important
     * bits.
     *
     * Each section is optional, so to work on any part find the correct top level
     * `(...)?` and mess around with it.
     */
    var regex = /^(?:([a-z]*):)?(?:\/\/)?(?:([^:@]*)(?::([^@]*))?@)?([0-9a-z-._]+)?(?::([0-9]*))?(\/[^?#]*)?(?:\?([^#]*))?(?:#(.*))?$/i;
    //               1 - scheme              2 - user    3 = pass    4 - host           5 - port  6 - path        7 - query    8 - hash

    var noslash = ["mailto", "bitcoin"];

    var self = {
        /** Parse a query string.
         *
         * This function parses a query string (sometimes called the search
         * string).  It takes a query string and returns a map of the results.
         *
         * Keys are considered to be everything up to the first '=' and values are
         * everything afterwords.  Since URL-decoding is done after parsing, keys
         * and values can have any values, however, '=' have to be encoded in keys
         * while '?' and '&' have to be encoded anywhere (as they delimit the
         * kv-pairs).
         *
         * Keys and values will always be strings, except if there is a key with no
         * '=' in which case it will be considered a flag and will be set to true.
         * Later values will override earlier values.
         *
         * Array keys are also supported.  By default keys in the form of `name[i]`
         * will be returned like that as strings.  However, if you set the `array`
         * flag in the options object they will be parsed into arrays.  Note that
         * although the object returned is an `Array` object all keys will be
         * written to it.  This means that if you have a key such as `k[forEach]`
         * it will overwrite the `forEach` function on that array.  Also note that
         * string properties always take precedence over array properties,
         * irrespective of where they are in the query string.
         *
         *   url.get("array[1]=test&array[foo]=bar",{array:true}).array[1]  === "test"
         *   url.get("array[1]=test&array[foo]=bar",{array:true}).array.foo === "bar"
         *   url.get("array=notanarray&array[0]=1",{array:true}).array      === "notanarray"
         *
         * If array parsing is enabled keys in the form of `name[]` will
         * automatically be given the next available index.  Note that this can be
         * overwritten with later values in the query string.  For this reason is
         * is best not to mix the two formats, although it is safe (and often
         * useful) to add an automatic index argument to the end of a query string.
         *
         *   url.get("a[]=0&a[]=1&a[0]=2", {array:true})  -> {a:["2","1"]};
         *   url.get("a[0]=0&a[1]=1&a[]=2", {array:true}) -> {a:["0","1","2"]};
         *
         * @param{string} q The query string (the part after the '?').
         * @param{{full:boolean,array:boolean}=} opt Options.
         *
         * - full: If set `q` will be treated as a full url and `q` will be built.
         *   by calling #parse to retrieve the query portion.
         * - array: If set keys in the form of `key[i]` will be treated
         *   as arrays/maps.
         *
         * @return{!Object.<string, string|Array>} The parsed result.
         */
        "get": function (q, opt) {
            q = q || "";
            if (typeof opt == "undefined") opt = {};
            if (typeof opt["full"] == "undefined") opt["full"] = false;
            if (typeof opt["array"] == "undefined") opt["array"] = false;

            if (opt["full"] === true) {
                q = self["parse"](q, { "get": false })["query"] || "";
            }

            var o = {};

            var c = q.split("&");
            for (var i = 0; i < c.length; i++) {
                if (!c[i].length) continue;

                var d = c[i].indexOf("=");
                var k = c[i],
                    v = true;
                if (d >= 0) {
                    k = c[i].substr(0, d);
                    v = c[i].substr(d + 1);

                    v = decodeURIComponent(v);
                }

                if (opt["array"]) {
                    var inds = [];
                    var ind;
                    var curo = o;
                    var curk = k;
                    while (ind = curk.match(array)) // Array!
                    {
                        curk = curk.substr(0, ind.index);
                        inds.unshift(decodeURIComponent(ind[1]));
                    }
                    curk = decodeURIComponent(curk);
                    if (inds.some(function (i) {
                        if (typeof curo[curk] == "undefined") curo[curk] = [];
                        if (!Array.isArray(curo[curk])) {
                            //console.log("url.get: Array property "+curk+" already exists as string!");
                            return true;
                        }

                        curo = curo[curk];

                        if (i === "") i = curo.length;

                        curk = i;
                    })) continue;
                    curo[curk] = v;
                    continue;
                }

                k = decodeURIComponent(k);

                //typeof o[k] == "undefined" || console.log("Property "+k+" already exists!");
                o[k] = v;
            }

            return o;
        },

        /** Build a get query from an object.
         *
         * This constructs a query string from the kv pairs in `data`.  Calling
         * #get on the string returned should return an object identical to the one
         * passed in except all non-boolean scalar types become strings and all
         * object types become arrays (non-integer keys are still present, see
         * #get's documentation for more details).
         *
         * This always uses array syntax for describing arrays.  If you want to
         * serialize them differently (like having the value be a JSON array and
         * have a plain key) you will need to do that before passing it in.
         *
         * All keys and values are supported (binary data anyone?) as they are
         * properly URL-encoded and #get properly decodes.
         *
         * @param{Object} data The kv pairs.
         * @param{string} prefix The properly encoded array key to put the
         *   properties.  Mainly intended for internal use.
         * @return{string} A URL-safe string.
         */
        "buildget": function (data, prefix) {
            var itms = [];
            for (var k in data) {
                var ek = encodeURIComponent(k);
                if (typeof prefix != "undefined") ek = prefix + "[" + ek + "]";

                var v = data[k];

                switch (typeof v) {
                    case 'boolean':
                        if (v) itms.push(ek);
                        break;
                    case 'number':
                        v = v.toString();
                    case 'string':
                        itms.push(ek + "=" + encodeURIComponent(v));
                        break;
                    case 'object':
                        itms.push(self["buildget"](v, ek));
                        break;
                }
            }
            return itms.join("&");
        },

        /** Parse a URL
         *
         * This breaks up a URL into components.  It attempts to be very liberal
         * and returns the best result in most cases.  This means that you can
         * often pass in part of a URL and get correct categories back.  Notably,
         * this works for emails and Jabber IDs, as well as adding a '?' to the
         * beginning of a string will parse the whole thing as a query string.  If
         * an item is not found the property will be undefined.  In some cases an
         * empty string will be returned if the surrounding syntax but the actual
         * value is empty (example: "://example.com" will give a empty string for
         * scheme.)  Notably the host name will always be set to something.
         *
         * Returned properties.
         *
         * - **scheme:** The url scheme. (ex: "mailto" or "https")
         * - **user:** The username.
         * - **pass:** The password.
         * - **host:** The hostname. (ex: "localhost", "123.456.7.8" or "example.com")
         * - **port:** The port, as a number. (ex: 1337)
         * - **path:** The path. (ex: "/" or "/about.html")
         * - **query:** "The query string. (ex: "foo=bar&v=17&format=json")
         * - **get:** The query string parsed with get.  If `opt.get` is `false` this
         *   will be absent
         * - **hash:** The value after the hash. (ex: "myanchor")
         *   be undefined even if `query` is set.
         *
         * @param{string} url The URL to parse.
         * @param{{get:Object}=} opt Options:
         *
         * - get: An options argument to be passed to #get or false to not call #get.
         *    **DO NOT** set `full`.
         *
         * @return{!Object} An object with the parsed values.
         */
        "parse": function (url, opt) {

            if (typeof opt == "undefined") opt = {};

            var md = url.match(regex) || [];

            var r = {
                "url": url,

                "scheme": md[1],
                "user": md[2],
                "pass": md[3],
                "host": md[4],
                "port": md[5] && +md[5],
                "path": md[6],
                "query": md[7],
                "hash": md[8]
            };

            if (opt.get !== false) r["get"] = r["query"] && self["get"](r["query"], opt.get);

            return r;
        },

        /** Build a URL from components.
         *
         * This pieces together a url from the properties of the passed in object.
         * In general passing the result of `parse()` should return the URL.  There
         * may differences in the get string as the keys and values might be more
         * encoded then they were originally were.  However, calling `get()` on the
         * two values should yield the same result.
         *
         * Here is how the parameters are used.
         *
         *  - url: Used only if no other values are provided.  If that is the case
         *     `url` will be returned verbatim.
         *  - scheme: Used if defined.
         *  - user: Used if defined.
         *  - pass: Used if defined.
         *  - host: Used if defined.
         *  - path: Used if defined.
         *  - query: Used only if `get` is not provided and non-empty.
         *  - get: Used if non-empty.  Passed to #buildget and the result is used
         *    as the query string.
         *  - hash: Used if defined.
         *
         * These are the options that are valid on the options object.
         *
         *  - useemptyget: If truthy, a question mark will be appended for empty get
         *    strings.  This notably makes `build()` and `parse()` fully symmetric.
         *
         * @param{Object} data The pieces of the URL.
         * @param{Object} opt Options for building the url.
         * @return{string} The URL.
         */
        "build": function (data, opt) {
            opt = opt || {};

            var r = "";

            if (typeof data["scheme"] != "undefined") {
                r += data["scheme"];
                r += noslash.indexOf(data["scheme"]) >= 0 ? ":" : "://";
            }
            if (typeof data["user"] != "undefined") {
                r += data["user"];
                if (typeof data["pass"] == "undefined") {
                    r += "@";
                }
            }
            if (typeof data["pass"] != "undefined") r += ":" + data["pass"] + "@";
            if (typeof data["host"] != "undefined") r += data["host"];
            if (typeof data["port"] != "undefined") r += ":" + data["port"];
            if (typeof data["path"] != "undefined") r += data["path"];

            if (opt["useemptyget"]) {
                if (typeof data["get"] != "undefined") r += "?" + self["buildget"](data["get"]);else if (typeof data["query"] != "undefined") r += "?" + data["query"];
            } else {
                // If .get use it.  If .get leads to empty, use .query.
                var q = data["get"] && self["buildget"](data["get"]) || data["query"];
                if (q) r += "?" + q;
            }

            if (typeof data["hash"] != "undefined") r += "#" + data["hash"];

            return r || data["url"] || "";
        }
    };

    if (typeof define != "undefined" && define["amd"]) define(self);else if (typeof module != "undefined") module['exports'] = self;else window["url"] = self;
}();

var datepicker = function (elementID, opt) {

    // check arguments
    if (typeof elementID !== "string" || elementID.length === 0) {
        console.error("datepicker error: input ID is not string or is empty");
        return;
    }
    var options = opt || {};

    // variables
    var isCalClicked = false;
    var isSynced = false;

    var dayOfWeek;

    var selectedYear;
    var selectedMonth;
    var selectedDay;

    var currentYear;
    var currentMonth;
    var currentDay;

    var todaysYear;
    var todaysMonth;
    var todaysDay;

    var dayOfWeekJ;

    var numberOfDays;

    var todayG;
    var todaysJ;

    // consts
    var MONTH_NAMES = {
        "1": "فروردین",
        "2": "اردیبهشت",
        "3": "خرداد",
        "4": "تیر",
        "5": "مرداد",
        "6": "شهریور",
        "7": "مهر",
        "8": "آبان",
        "9": "آذر",
        "10": "دی",
        "11": "بهمن",
        "12": "اسفند"
    };
    var DAY_NAMES = {
        "شنبه": "ش",
        "یکشنبه": "ی",
        "دوشنبه": "د",
        "سه شنبه": "س",
        "چهارشنبه": "چ",
        "پنج شنبه": "پ",
        "جمعه": "ج"
    };
    var FA_NUMS = ['٠', '١', '٢', '٣', '۴', '۵', '۶', '٧', '٨', '٩', '١٠', '١١', '١٢', '١٣', '١۴', '١۵', '١۶', '١٧', '١٨', '١٩', '٢٠', '٢١', '٢٢', '٢٣', '٢۴', '٢۵', '٢۶', '٢٧', '٢٨', '٢٩', '٣٠', '٣١', '٣٢'];

    // set options
    options.placeholder = options.placeholder !== undefined ? options.placeholder : "";
    options.twodigit = options.twodigit !== undefined ? options.twodigit : true;
    options.closeAfterSelect = options.closeAfterSelect !== undefined ? options.closeAfterSelect : true;
    options.nextButtonIcon = options.nextButtonIcon !== undefined ? options.nextButtonIcon : false;
    options.previousButtonIcon = options.previousButtonIcon !== undefined ? options.previousButtonIcon : false;
    options.buttonsColor = options.buttonsColor !== undefined ? options.buttonsColor : false;
    options.forceFarsiDigits = options.forceFarsiDigits !== undefined ? options.forceFarsiDigits : false;
    options.markToday = options.markToday !== undefined ? options.markToday : false;
    options.markHolidays = options.markHolidays !== undefined ? options.markHolidays : false;
    options.highlightSelectedDay = options.highlightSelectedDay !== undefined ? options.highlightSelectedDay : false;
    options.sync = options.sync !== undefined ? options.sync : false;
    options.gotoToday = options.gotoToday !== undefined ? options.gotoToday : false;

    // create DOM
    var inputElement = $("#" + elementID);

    if (inputElement.attr("placeholder") === undefined) {
        inputElement.attr("placeholder", options.placeholder);
    }

    // create parent div
    inputElement.wrap("<div id='bd-root-" + elementID + "' style='position: relative;'></div>");

    // create main div for calendar, below input element
    inputElement.after("<div id='bd-main-" + elementID + "' class='bd-main bd-hide' style='position: absolute; direction: rtl;'></div>");
    var mainDiv = $("#bd-main-" + elementID);

    // create calendar div inside main div
    mainDiv.append("<div class='bd-calendar'></div>");
    var calendarDiv = mainDiv.find('.bd-calendar');

    // create title div and table inside calendar div
    calendarDiv.append("<div class='bd-title'></div>");
    var titleDiv = calendarDiv.find('.bd-title');
    calendarDiv.append("<table class='bd-table' dir='rtl' cellspacing='0' cellpadding='0'></table>");

    // create month and year drop downs and next/prev month buttons inside title div
    titleDiv.append("<button id='bd-next-" + elementID + "' class='bd-next' type='button' title='ماه بعدی' data-toggle='tooltip'><span>بعدی</span></button>");
    var nextMonth = $("#bd-next-" + elementID);
    if (options.nextButtonIcon) {
        nextMonth.find("span").css("display", "none");
        if (options.nextButtonIcon.indexOf(".") !== -1) {
            // image
            nextMonth.css("background-image", "url(" + options.nextButtonIcon + ")");
        } else {
            // css class
            nextMonth.addClass(options.nextButtonIcon);
        }
    }

    titleDiv.append("<div class='bd-dropdown'></div><div class='bd-dropdown'></div>");

    titleDiv.find('.bd-dropdown:nth-child(2)').append("<select id='bd-month-" + elementID + "' class='bd-month'></select>");
    var monthDropdown = $("#bd-month-" + elementID);
    $.each(MONTH_NAMES, function (key, value) {
        monthDropdown.append($("<option></option>").attr("value", key).text(value));
    });

    titleDiv.find('.bd-dropdown:nth-child(3)').append("<select id='bd-year-" + elementID + "' class='bd-year'></select>");
    var yearDropdown = $("#bd-year-" + elementID);

    titleDiv.append("<button id='bd-prev-" + elementID + "' class='bd-prev' type='button' title='ماه قبلی' data-toggle='tooltip'><span>قبلی</span></button>");
    var prevMonth = $("#bd-prev-" + elementID);
    if (options.nextButtonIcon) {
        prevMonth.find("span").css("display", "none");
        if (options.previousButtonIcon.indexOf(".") !== -1) {
            // image
            prevMonth.css("background-image", "url(" + options.previousButtonIcon + ")");
        } else {
            // css class
            prevMonth.addClass(options.previousButtonIcon);
        }
    }

    if (options.buttonsColor) {
        nextMonth.css("color", options.buttonsColor);
        nextMonth.find("span").css("color", options.buttonsColor);
        prevMonth.css("color", options.buttonsColor);
        prevMonth.find("span").css("color", options.buttonsColor);
    }

    // create table header and body
    calendarDiv.find('.bd-table').append("<thead><tr></tr></thead>");
    $.each(DAY_NAMES, function (key, value) {
        calendarDiv.find('.bd-table thead tr').append($("<th></th>").text(value));
    });

    calendarDiv.find('.bd-table').append("<tbody id='bd-table-days-" + elementID + "' class='bd-table-days'></tbody>");
    var daysTable = $("#bd-table-days-" + elementID);

    // create go to todays button
    if (options.gotoToday) {
        calendarDiv.append("<div class='bd-goto-today'>برو به امروز</div>");
        var gotoToday = calendarDiv.find(".bd-goto-today");
    }

    // opening and closing functionality
    inputElement.on("focus", function () {
        mainDiv.removeClass("bd-hide");
        if (options.sync && isSynced === false) {
            syncCalendar();
            isSynced = true;
        }
        mainDiv;
    }).on('blur', function () {
        if (isCalClicked == false) {
            mainDiv.addClass("bd-hide");
            isSynced = false;
        } else {
            isCalClicked = false;
            inputElement.focus();
            event.preventDefault();
        }
    });

    mainDiv.on('mousedown', function (event) {
        isCalClicked = true;
    });

    // dropdown events
    monthDropdown.on('change', function () {
        selectedMonth = parseInt(this.value);
        numberOfDays = monthDays(selectedYear, selectedMonth);
        dayOfWeekJ = findFirstDayOfMonth(selectedYear, selectedMonth);
        drawDays(numberOfDays, dayOfWeekJ);
    });
    yearDropdown.on('change', function () {
        selectedYear = parseInt(this.value);
        numberOfDays = monthDays(selectedYear, selectedMonth);
        dayOfWeekJ = findFirstDayOfMonth(selectedYear, selectedMonth);
        drawDays(numberOfDays, dayOfWeekJ);
    });

    // Georgian to Jalali converter (minified)
    // source is unknown. contact if you know the code owner.
    function gregorianToJalali(a, r, s) {
        a = parseInt(a), r = parseInt(r), s = parseInt(s);for (var n = a - 1600, e = r - 1, t = s - 1, p = 365 * n + parseInt((n + 3) / 4) - parseInt((n + 99) / 100) + parseInt((n + 399) / 400), I = 0; e > I; ++I) p += g_days[I];e > 1 && (n % 4 == 0 && n % 100 != 0 || n % 400 == 0) && ++p, p += t;var v = p - 79,
            d = parseInt(v / 12053);v %= 12053;var o = 979 + 33 * d + 4 * parseInt(v / 1461);v %= 1461, v >= 366 && (o += parseInt((v - 1) / 365), v = (v - 1) % 365);for (var I = 0; 11 > I && v >= j_days[I]; ++I) v -= j_days[I];var y = I + 1,
            _ = v + 1;return [o, y, _];
    }var g_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
        j_days = [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29];
    // Jalali to Georgian converter (minified)
    // source is unknown. contact if you know the code owner.
    function toJalaali(d, i, a) {
        return d2j(g2d(d, i, a));
    }function toGregorian(d, i, a) {
        return d2g(j2d(d, i, a));
    }function isValidJalaaliDate(d, i, a) {
        return d >= -61 && 3177 >= d && i >= 1 && 12 >= i && a >= 1 && a <= jalaaliMonthLength(d, i);
    }function isLeapJalaaliYear(d) {
        return 0 === jalCal(d).leap;
    }function jalaaliMonthLength(d, i) {
        return 6 >= i ? 31 : 11 >= i ? 30 : isLeapJalaaliYear(d) ? 30 : 29;
    }function jalCal(d) {
        var i,
            a,
            n,
            r,
            t,
            o,
            v,
            e = [-61, 9, 38, 199, 426, 686, 756, 818, 1111, 1181, 1210, 1635, 2060, 2097, 2192, 2262, 2324, 2394, 2456, 3178],
            l = e.length,
            u = d + 621,
            m = -14,
            g = e[0];if (g > d || d >= e[l - 1]) throw new Error("Invalid Jalaali year " + d);for (v = 1; l > v && (i = e[v], a = i - g, !(i > d)); v += 1) m = m + 8 * div(a, 33) + div(mod(a, 33), 4), g = i;return o = d - g, m = m + 8 * div(o, 33) + div(mod(o, 33) + 3, 4), 4 === mod(a, 33) && a - o === 4 && (m += 1), r = div(u, 4) - div(3 * (div(u, 100) + 1), 4) - 150, t = 20 + m - r, 6 > a - o && (o = o - a + 33 * div(a + 4, 33)), n = mod(mod(o + 1, 33) - 1, 4), -1 === n && (n = 4), { leap: n, gy: u, march: t };
    }function j2d(d, i, a) {
        var n = jalCal(d);return g2d(n.gy, 3, n.march) + 31 * (i - 1) - div(i, 7) * (i - 7) + a - 1;
    }function d2j(d) {
        var i,
            a,
            n,
            r = d2g(d).gy,
            t = r - 621,
            o = jalCal(t),
            v = g2d(r, 3, o.march);if (n = d - v, n >= 0) {
            if (185 >= n) return a = 1 + div(n, 31), i = mod(n, 31) + 1, { jy: t, jm: a, jd: i };n -= 186;
        } else t -= 1, n += 179, 1 === o.leap && (n += 1);return a = 7 + div(n, 30), i = mod(n, 30) + 1, { jy: t, jm: a, jd: i };
    }function g2d(d, i, a) {
        var n = div(1461 * (d + div(i - 8, 6) + 100100), 4) + div(153 * mod(i + 9, 12) + 2, 5) + a - 34840408;return n = n - div(3 * div(d + 100100 + div(i - 8, 6), 100), 4) + 752;
    }function d2g(d) {
        var i, a, n, r, t;return i = 4 * d + 139361631, i = i + 4 * div(3 * div(4 * d + 183187720, 146097), 4) - 3908, a = 5 * div(mod(i, 1461), 4) + 308, n = div(mod(a, 153), 5) + 1, r = mod(div(a, 153), 12) + 1, t = div(i, 1461) - 100100 + div(8 - r, 6), { gy: t, gm: r, gd: n };
    }function div(d, i) {
        return ~~(d / i);
    }function mod(d, i) {
        return d - ~~(d / i) * i;
    }

    var syncCalendar = function () {
        var inputValue = fixDate(inputElement.val());
        if (inputValue === "") return;

        inputValue = inputValue.split("/");
        monthDropdown.val(parseInt(inputValue[1]));
        monthDropdown.trigger("change");
        yearDropdown.val(parseInt(inputValue[0]));
        yearDropdown.trigger("change");

        if (options.highlightSelectedDay) {
            mainDiv.find(".bd-selected-day").removeClass("bd-selected-day");
            mainDiv.find(".day-" + parseInt(inputValue[2])).addClass("bd-selected-day");
        }
    };

    var fixDate = function (date) {
        if (date === "") return "";

        date = date.split("/");
        // if (date[0].length === 2) {
        //     date[0] = "13" + date[0];
        // }
        if (date[1].length < 2) {
            if (date[1] < 10) {
                date[1] = "0" + date[1];
            }
        }
        if (date[2].length < 2) {
            if (date[2] < 10) {
                date[2] = "0" + date[2];
            }
        }
        date = date.join("/");
        return date;
    };

    var convertToJWeek = function (dayOfWeekG) {
        var dayOfWeekJ;
        if (dayOfWeekG < 6) {
            dayOfWeekJ = dayOfWeekG + 1;
        } else {
            dayOfWeekJ = 0;
        }
        return dayOfWeekJ;
    };

    var makeYearList = function (thisYear) {
        yearDropdown.find('option').remove();
        for (i = 0; i < 101; i++) {
            var tempYear = thisYear - 95 + i + '';
            if (options.forceFarsiDigits) {
                for (var j = 0; j < 10; j++) {
                    var rgx = new RegExp(j, 'g');
                    tempYear = tempYear.replace(rgx, FA_NUMS[j]);
                }
            }
            yearDropdown.append($('<option>', {
                value: thisYear - 95 + i,
                text: tempYear
            }));
        }
    };

    // isleap calculator, supported year: 1243 - 1473
    var isLeapYear = function (year) {
        var mod;
        if (year < 1343 && year > 1243) {
            mod = year % 33;
            if (mod == 1 || mod == 5 || mod == 9 || mod == 13 || mod == 17 || mod == 22 || mod == 26 || mod == 30) {
                return true;
            } else {
                return false;
            }
        } else if (year < 1473 && year > 1342) {
            mod = year % 17;
            if (mod == 1 || mod == 5 || mod == 9 || mod == 13 || mod == 18 || mod == 22 || mod == 26 || mod == 30) {
                return true;
            } else {
                return false;
            }
        } else {
            return "unknown";
        }
    };

    var monthDays = function (year, month) {
        if (month < 7) {
            return 31;
        } else if (month < 12) {
            return 30;
        } else {
            if (isLeapYear(year)) {
                return 30;
            } else {
                return 29;
            }
        }
    };

    // make first page of calendar
    todayG = new Date();

    todaysJ = gregorianToJalali(todayG.getFullYear(), todayG.getMonth() + 1, todayG.getDate());
    var selectedDateJ = [];
    for (i = 0; i < 3; i++) {
        selectedDateJ[i] = todaysJ[i];
    }

    todaysYear = todaysJ[0];
    todaysMonth = todaysJ[1];
    todaysDay = todaysJ[2];

    selectedYear = selectedDateJ[0];
    selectedMonth = selectedDateJ[1];
    selectedDay = selectedDateJ[2];

    monthDropdown.val(selectedMonth);
    makeYearList(selectedYear);
    yearDropdown.val(selectedYear);

    numberOfDays = monthDays(selectedYear, selectedMonth);

    // find first day of month in week
    var findFirstDayOfMonth = function (selectedYear, selectedMonth) {
        var firstDayOfMonthG = toGregorian(selectedYear, selectedMonth, 1);
        firstDayOfMonthG = new Date(firstDayOfMonthG.gy + "/" + firstDayOfMonthG.gm + "/" + firstDayOfMonthG.gd);
        return convertToJWeek(firstDayOfMonthG.getDay());
    };
    dayOfWeekJ = findFirstDayOfMonth(selectedYear, selectedMonth);

    // draw days on calendar
    var drawDays = function (numberOfDays, dayOfWeekJ) {
        daysTable.empty();
        var dayIndex = 1;
        var rowIndex = 1;
        while (dayIndex <= numberOfDays) {
            daysTable.append($('<tr>', {
                class: "tr-" + rowIndex
            }));
            for (i = 0; i < 7; i++) {
                if (dayIndex == 1) {
                    var j = 0;
                    while (j < dayOfWeekJ) {
                        $("#bd-table-days-" + elementID + " .tr-1").append($('<td>', {
                            class: "bd-empty-cell"
                        }));
                        j++;
                        i++;
                    }
                }
                if (i < 7 && dayIndex <= numberOfDays) {
                    var tempTD = '<td>' + '<button class="day day-' + dayIndex + '" type="button">' + (options.forceFarsiDigits ? FA_NUMS[dayIndex] : dayIndex) + '</button>' + '</td>';

                    // mark todays day by adding .bd-today class
                    if (options.markToday) {
                        if (dayIndex == todaysDay && todaysMonth == selectedMonth && todaysYear == selectedYear) {
                            var idx = tempTD.indexOf('day day-');
                            tempTD = tempTD.slice(0, idx) + ' bd-today ' + tempTD.slice(idx);
                        }
                    }

                    // mark holidays by adding .bd-holiday class
                    if (options.markHolidays) {
                        if (i == 6) {
                            var idx = tempTD.indexOf('day day-');
                            tempTD = tempTD.slice(0, idx) + ' bd-holiday ' + tempTD.slice(idx);
                        }
                    }

                    $("#bd-table-days-" + elementID + " .tr-" + rowIndex).append(tempTD);

                    dayIndex++;
                }
            }
            rowIndex++;
        }

        if (options.highlightSelectedDay) {
            var inputValue = inputElement.val();
            inputValue = inputValue.split("/");
            if (inputValue[0] == selectedYear && inputValue[1] == selectedMonth) {
                mainDiv.find(".bd-selected-day").removeClass("bd-selected-day");
                mainDiv.find(".day-" + parseInt(inputValue[2])).addClass("bd-selected-day");
            }
        }
    };

    inputElement.parent().on("click", "button.day", function () {
        var datestr = selectedYear + "/" + selectedMonth + "/" + $(this).attr('class').split(" ")[$(this).attr('class').split(" ").indexOf('day') + 1].split("-")[1];
        if (options.twodigit) {
            datestr = fixDate(datestr);
        }
        inputElement.val(datestr);
        inputElement.trigger("change");
        if (options.closeAfterSelect) {
            isCalClicked = false;
            inputElement.trigger("blur");
        }

        if (options.highlightSelectedDay) {
            mainDiv.find(".bd-selected-day").removeClass("bd-selected-day");
            $(this).addClass("bd-selected-day");
        }
    });

    nextMonth.on("click", function () {
        //console.log("month: " + selectedMonth + ", year: " + selectedYear);
        if (monthDropdown.val() < 12) {
            monthDropdown.val(parseInt(monthDropdown.val()) + 1);
            monthDropdown.trigger("change");
        } else {
            monthDropdown.val(1);
            monthDropdown.trigger("change");
            yearDropdown.val(parseInt(yearDropdown.val()) + 1);
            yearDropdown.trigger("change");
        }
    });

    prevMonth.on("click", function () {
        if (monthDropdown.val() > 1) {
            monthDropdown.val(parseInt(monthDropdown.val()) - 1);
            monthDropdown.trigger("change");
        } else {
            monthDropdown.val(12);
            monthDropdown.trigger("change");
            yearDropdown.val(parseInt(yearDropdown.val()) - 1);
            yearDropdown.trigger("change");
        }
    });

    if (options.gotoToday) {
        gotoToday.on("click", function () {
            monthDropdown.val(todaysMonth);
            monthDropdown.trigger("change");
            yearDropdown.val(todaysYear);
            yearDropdown.trigger("change");
        });
    }

    drawDays(numberOfDays, dayOfWeekJ);

    // enable bootstrap tooltip if bootstrap is loaded
    if (typeof $().modal == 'function') {
        $('[data-toggle="tooltip"]').tooltip();
    }
};

var media_xm = window.matchMedia("(max-width: 575.98px)");
var media_sm = window.matchMedia("(min-width: 576px) and (max-width: 767.98px)");
var media_md = window.matchMedia("(min-width: 768px) and (max-width: 991.98px)");
var media_lg = window.matchMedia("(min-width: 992px) and (max-width: 1199.98px)");
var media_xl = window.matchMedia("(min-width: 1200px)");

function event_media_xm(media) {
    if (media.matches) return $(document).trigger('media:xm', [media]);else return $(document).trigger('media:xm:exit', [media]);
}
function event_media_sm(media) {
    if (media.matches) return $(document).trigger('media:sm', [media]);else return $(document).trigger('media:sm:exit', [media]);
}
function event_media_md(media) {
    if (media.matches) return $(document).trigger('media:md', [media]);else return $(document).trigger('media:md:exit', [media]);
}
function event_media_lg(media) {
    if (media.matches) return $(document).trigger('media:lg', [media]);else return $(document).trigger('media:lg:exit', [media]);
}
function event_media_xl(media) {
    if (media.matches) return $(document).trigger('media:xl', [media]);else return $(document).trigger('media:xl:exit', [media]);
}

$(document).ready(function () {
    event_media_xm(media_xm);
    media_xm.addListener(event_media_xm);

    event_media_sm(media_sm);
    media_sm.addListener(event_media_sm);

    event_media_md(media_md);
    media_md.addListener(event_media_md);

    event_media_lg(media_lg);
    media_lg.addListener(event_media_lg);

    event_media_xl(media_xl);
    media_xl.addListener(event_media_xl);
});

function responsive_menu() {
    $('#menu').removeClass('d-none').addClass('d-flex');
    // $('#desktop').removeClass('d-none');
    $('body').addClass('responsive-menu');
    $('#btn-menu').find($(".fas")).removeClass('fa-bars').addClass('fa-arrow-right');
    $(this).off('click.responsive-menu');
    $(this).on('click.close-responsive-menu', function () {
        $(this).off('click.close-responsive-menu');
        $(this).on('click.responsive-menu', responsive_menu);
        $('#menu').addClass('d-none').removeClass('d-flex');
        // $('#desktop').addClass('d-none');
        $('body').removeClass('responsive-menu');
        $('#btn-menu').find($(".fas")).removeClass('fa-arrow-right').addClass('fa-bars');
    });
}

$(document).on('media:xm media:sm', function (event, media) {
    $("body:not(.responsive-menu) #btn-menu").on('click.responsive-menu', responsive_menu);

    var menu = $('#menu');
    var desktop = $('#desktop');
    var btn_menu = $('#btn-menu');
    $(document).mouseup(function (e) {
        if (!menu.is(e.target) && menu.has(e.target).length === 0 && !desktop.is(e.target) && desktop.has(e.target).length === 0 && !btn_menu.is(e.target) && btn_menu.has(e.target).length === 0) {
            $("body.responsive-menu #btn-menu").trigger('click.close-responsive-menu');
        }
    });

    // $("body").swipe({
    //     swipe: function(event, direction, distance, duration, fingerCount, fingerData) {
    //         if (direction == 'left') {
    //             $("body:not(.responsive-menu) #btn-menu").trigger('click.responsive-menu');
    //         }

    //         if (direction == 'right') {
    //             $("body.responsive-menu #btn-menu").trigger('click.close-responsive-menu');
    //         }

    //         if (direction == 'up' || direction == 'down') {
    //             if (!menu.is(event.target) && menu.has(event.target).length === 0) {
    //                 $("body.responsive-menu #btn-menu").trigger('click.close-responsive-menu');
    //             }
    //         }
    //     }
    // });
});

$(document).on('media:md media:lg media:xl', function (event, media) {
    $("body.responsive-menu #btn-menu").trigger('click.close-responsive-menu');
    $("#btn-menu").off('click.responsive-menu');
    // $("#btn-menu").off('click.close-responsive-menu');
    // $('#menu').addClass('d-none').removeClass('d-flex');
    // $('#desktop').addClass('d-none');
    // $('body').removeClass('responsive-menu');
    // $('#btn-menu').find($(".fas")).removeClass('fa-arrow-right').addClass('fa-bars');
});
(function () {
    function ViwFile() {
        $('.custom-file-input', this).on('change', function () {
            if (!window.File && !window.FileReader && !window.FileList && !window.Blob) {
                console.error('FileReader unsupported!');
                return false;
            }
            var file_index = 0;
            var file;
            $(this).next().html('');
            var files = [];
            while (file = this.files.item(file_index++)) {
                files.push(file.name);
            }
            $(this).next().html(files.join(' : '));
        });
    }
    $(document).on('statio:global:renderResponse', function (event, base, contex) {
        base.each(function () {
            ViwFile.call(this);
        });
    });
    ViwFile.call(document);
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImRhc2hpby5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDN0dBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJzYXJrb290Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGFzaWRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2FzaWRlJyk7XHJcbmNvbnN0IGFzaWRlQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2FzaWRlLWJ0bicpO1xyXG5mdW5jdGlvbiBoYW5kbGVBc2lkZShldmVudCkge1xyXG4gICAgYXNpZGUuY2xhc3NMaXN0LmFkZCgnb3BlbicpO1xyXG59XHJcbmFzaWRlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlQXNpZGUpO1xyXG5cclxuY29uc3QgcHJvZmlsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlJyk7XHJcbmNvbnN0IGRyb3Bkb3duID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGUtZHJvcGRvd24nKTtcclxuXHJcbmZ1bmN0aW9uIGhhbmRsZVByb2ZpbGVDbGljayhldmVudCkge1xyXG4gICAgZHJvcGRvd24uY2xhc3NMaXN0LmFkZCgnb3BlbicpO1xyXG59XHJcblxyXG5wcm9maWxlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlUHJvZmlsZUNsaWNrKTtcclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgIGlmICghZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJy5wcm9maWxlLWRpdicpKSB7XHJcbiAgICAgICAgZHJvcGRvd24uY2xhc3NMaXN0LnJlbW92ZSgnb3BlbicpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFldmVudC50YXJnZXQuY2xvc2VzdCgnI2FzaWRlJykgJiYgIWV2ZW50LnRhcmdldC5jbG9zZXN0KCcjYXNpZGUtYnRuJykpIHtcclxuICAgICAgICBhc2lkZS5jbGFzc0xpc3QucmVtb3ZlKCdvcGVuJyk7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuYW00Y29yZS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgLy8gVGhlbWVzIGJlZ2luXHJcbiAgICBhbTRjb3JlLnVzZVRoZW1lKGFtNHRoZW1lc19hbWNoYXJ0cyk7XHJcbiAgICAvLyBUaGVtZXMgZW5kXHJcblxyXG4gICAgLy8gQ3JlYXRlIGNoYXJ0IGluc3RhbmNlXHJcbiAgICB2YXIgY2hhcnQgPSBhbTRjb3JlLmNyZWF0ZShcImNoYXJ0ZGl2XCIsIGFtNGNoYXJ0cy5YWUNoYXJ0KTtcclxuXHJcbiAgICBjaGFydC5ydGwgPSB0cnVlO1xyXG5cclxuICAgIC8vIEFkZCBkYXRhXHJcbiAgICBjaGFydC5kYXRhID0gW3tcclxuICAgICAgICBcImNvdW50cnlcIjogXCJVU0FcIixcclxuICAgICAgICBcInZpc2l0c1wiOiAyMDI1XHJcbiAgICB9LCB7XHJcbiAgICAgICAgXCJjb3VudHJ5XCI6IFwiQ2hpbmFcIixcclxuICAgICAgICBcInZpc2l0c1wiOiAxODgyXHJcbiAgICB9LCB7XHJcbiAgICAgICAgXCJjb3VudHJ5XCI6IFwiSmFwYW5cIixcclxuICAgICAgICBcInZpc2l0c1wiOiAxODA5XHJcbiAgICB9LCB7XHJcbiAgICAgICAgXCJjb3VudHJ5XCI6IFwiR2VybWFueVwiLFxyXG4gICAgICAgIFwidmlzaXRzXCI6IDEzMjJcclxuICAgIH0sIHtcclxuICAgICAgICBcImNvdW50cnlcIjogXCJVS1wiLFxyXG4gICAgICAgIFwidmlzaXRzXCI6IDExMjJcclxuICAgIH0sIHtcclxuICAgICAgICBcImNvdW50cnlcIjogXCJGcmFuY2VcIixcclxuICAgICAgICBcInZpc2l0c1wiOiAxMTE0XHJcbiAgICB9LCB7XHJcbiAgICAgICAgXCJjb3VudHJ5XCI6IFwiSW5kaWFcIixcclxuICAgICAgICBcInZpc2l0c1wiOiA5ODRcclxuICAgIH0sIHtcclxuICAgICAgICBcImNvdW50cnlcIjogXCJTcGFpblwiLFxyXG4gICAgICAgIFwidmlzaXRzXCI6IDcxMVxyXG4gICAgfSwge1xyXG4gICAgICAgIFwiY291bnRyeVwiOiBcIk5ldGhlcmxhbmRzXCIsXHJcbiAgICAgICAgXCJ2aXNpdHNcIjogNjY1XHJcbiAgICB9LCB7XHJcbiAgICAgICAgXCJjb3VudHJ5XCI6IFwiUnVzc2lhXCIsXHJcbiAgICAgICAgXCJ2aXNpdHNcIjogNTgwXHJcbiAgICB9LCB7XHJcbiAgICAgICAgXCJjb3VudHJ5XCI6IFwiU291dGggS29yZWFcIixcclxuICAgICAgICBcInZpc2l0c1wiOiA0NDNcclxuICAgIH0sIHtcclxuICAgICAgICBcImNvdW50cnlcIjogXCJDYW5hZGFcIixcclxuICAgICAgICBcInZpc2l0c1wiOiA0NDFcclxuICAgIH0sIHtcclxuICAgICAgICBcImNvdW50cnlcIjogXCJCcmF6aWxcIixcclxuICAgICAgICBcInZpc2l0c1wiOiAzOTVcclxuICAgIH1dO1xyXG5cclxuICAgIC8vIENyZWF0ZSBheGVzXHJcblxyXG4gICAgdmFyIGNhdGVnb3J5QXhpcyA9IGNoYXJ0LnhBeGVzLnB1c2gobmV3IGFtNGNoYXJ0cy5DYXRlZ29yeUF4aXMoKSk7XHJcbiAgICBjYXRlZ29yeUF4aXMuZGF0YUZpZWxkcy5jYXRlZ29yeSA9IFwiY291bnRyeVwiO1xyXG4gICAgY2F0ZWdvcnlBeGlzLnJlbmRlcmVyLmdyaWQudGVtcGxhdGUubG9jYXRpb24gPSAwO1xyXG4gICAgY2F0ZWdvcnlBeGlzLnJlbmRlcmVyLm1pbkdyaWREaXN0YW5jZSA9IDMwO1xyXG5cclxuICAgIGNhdGVnb3J5QXhpcy5yZW5kZXJlci5sYWJlbHMudGVtcGxhdGUuYWRhcHRlci5hZGQoXCJkeVwiLCBmdW5jdGlvbiAoZHksIHRhcmdldCkge1xyXG4gICAgICAgIGlmICh0YXJnZXQuZGF0YUl0ZW0gJiYgdGFyZ2V0LmRhdGFJdGVtLmluZGV4ICYgMiA9PSAyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkeSArIDI1O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZHk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgdmFsdWVBeGlzID0gY2hhcnQueUF4ZXMucHVzaChuZXcgYW00Y2hhcnRzLlZhbHVlQXhpcygpKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgc2VyaWVzXHJcbiAgICB2YXIgc2VyaWVzID0gY2hhcnQuc2VyaWVzLnB1c2gobmV3IGFtNGNoYXJ0cy5Db2x1bW5TZXJpZXMoKSk7XHJcbiAgICBzZXJpZXMuZGF0YUZpZWxkcy52YWx1ZVkgPSBcInZpc2l0c1wiO1xyXG4gICAgc2VyaWVzLmRhdGFGaWVsZHMuY2F0ZWdvcnlYID0gXCJjb3VudHJ5XCI7XHJcbiAgICBzZXJpZXMubmFtZSA9IFwiVmlzaXRzXCI7XHJcbiAgICBzZXJpZXMuY29sdW1ucy50ZW1wbGF0ZS50b29sdGlwVGV4dCA9IFwie2NhdGVnb3J5WH06IFtib2xkXXt2YWx1ZVl9Wy9dXCI7XHJcbiAgICBzZXJpZXMuY29sdW1ucy50ZW1wbGF0ZS5maWxsT3BhY2l0eSA9IC44O1xyXG5cclxuICAgIHZhciBjb2x1bW5UZW1wbGF0ZSA9IHNlcmllcy5jb2x1bW5zLnRlbXBsYXRlO1xyXG4gICAgY29sdW1uVGVtcGxhdGUuc3Ryb2tlV2lkdGggPSAyO1xyXG4gICAgY29sdW1uVGVtcGxhdGUuc3Ryb2tlT3BhY2l0eSA9IDE7XHJcblxyXG59KTsgLy8gZW5kIGFtNGNvcmUucmVhZHkoKVxyXG5cclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcbiAgICAkKCcuc2VsZWN0MicpLnNlbGVjdDIoKTtcclxufSk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIGpyZXNwKGNvbnRleHQsIHJlcykge1xyXG4gICAgICAgIGNvbnRleHQudHJpZ2dlcignanJlc3AnLCBbcmVzXSk7XHJcbiAgICAgICAgaWYgKHJlcy5tZXNzYWdlKSB7XHJcbiAgICAgICAgICAgIGlmICh0b2FzdHIpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0b2FzdCA9IHRvYXN0cltyZXMuaXNfb2sgPyAnc3VjY2VzcycgOiAnZXJyb3InXShyZXMubWVzc2FnZV90ZXh0IHx8IHJlcy5tZXNzYWdlLCB1bmRlZmluZWQsIHtcclxuICAgICAgICAgICAgICAgICAgICBcImNsb3NlQnV0dG9uXCI6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuZXdlc3RPblRvcFwiOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIFwicG9zaXRpb25DbGFzc1wiOiBcInRvYXN0LWJvdHRvbS1yaWdodFwiXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpemlUb2FzdCkge1xyXG4gICAgICAgICAgICAgICAgaXppVG9hc3RbcmVzLmlzX29rID8gJ3N1Y2Nlc3MnIDogJ2Vycm9yJ10oeyBtZXNzYWdlOiByZXMubWVzc2FnZV90ZXh0IHx8IHJlcy5tZXNzYWdlIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZXMucmVkaXJlY3QpIHtcclxuICAgICAgICAgICAgaWYgKHJlcy5kaXJlY3QpIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSByZXMucmVkaXJlY3Q7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuZXcgU3RhdGlvKHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IHJlcy5yZWRpcmVjdFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB3aW5kb3cuSlJlc3AgPSBqcmVzcDtcclxufSkoKTtcclxuKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIGxpamF4KGNvbnRleHQsIG9uRmlyZSkge1xyXG4gICAgICAgIHZhciBiYWNrX3ZhbHVlID0gJChjb250ZXh0KS52YWwoKSB8fCAkKGNvbnRleHQpLmF0dHIoJ2RhdGEtdmFsdWUnKTtcclxuICAgICAgICBpZiAoJChjb250ZXh0KS5pcygnOmNoZWNrYm94JykpIHtcclxuICAgICAgICAgICAgYmFja192YWx1ZSA9ICQoY29udGV4dCkuaXMoJzpjaGVja2VkJykgPyAxIDogMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIFRpbWVvdXQgPSBudWxsO1xyXG4gICAgICAgIHZhciBmaXJlID0gbnVsbDtcclxuICAgICAgICBpZiAoJChjb250ZXh0KS5pcygnZm9ybScpICYmICEkKGNvbnRleHQpLmF0dHIoJ2RhdGEtbGlqYXgnKSkge1xyXG4gICAgICAgICAgICBmaXJlID0gWydzdWJtaXQnXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmaXJlID0gJChjb250ZXh0KS5hdHRyKCdkYXRhLWxpamF4Jykuc3BsaXQoJyAnKSB8fCBbJ2NoYW5nZSddO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpcmUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKC9eXFxkKyQvLnRlc3QoZmlyZVtpXSkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBUaW1lID0gZmlyZVtpXTtcclxuICAgICAgICAgICAgICAgICQoY29udGV4dCkub24oJ2tleXVwJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChUaW1lb3V0KSBjbGVhclRpbWVvdXQoVGltZW91dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgVGltZW91dCA9IHNldFRpbWVvdXQoc2VuZCwgVGltZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQoY29udGV4dCkub24oZmlyZVtpXSwgc2VuZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNlbmQoKSB7XHJcbiAgICAgICAgICAgIHZhciBocmVmID0gdXJsLnBhcnNlKGxvY2F0aW9uLmhyZWYpO1xyXG4gICAgICAgICAgICB2YXIgbmFtZSA9ICQoY29udGV4dCkuYXR0cignbmFtZScpIHx8ICQoY29udGV4dCkuYXR0cignZGF0YS1uYW1lJyk7XHJcbiAgICAgICAgICAgIGlmIChocmVmLmdldCAmJiBocmVmLmdldFtuYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIGhyZWYuZ2V0W25hbWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBnZXQgPSB1cmwuYnVpbGRnZXQoaHJlZi5nZXQpO1xyXG4gICAgICAgICAgICBocmVmID0gaHJlZi51cmwucmVwbGFjZSgvXFw/KC4qKSQvLCBnZXQgPyAnPycgKyBnZXQgOiAnJyk7XHJcbiAgICAgICAgICAgIHZhciBhY3Rpb24gPSAkKGNvbnRleHQpLmF0dHIoJ2hyZWYnKSB8fCAkKGNvbnRleHQpLmF0dHIoJ2FjdGlvbicpIHx8ICQoY29udGV4dCkuYXR0cignZGF0YS1hY3Rpb24nKSB8fCBocmVmO1xyXG4gICAgICAgICAgICB2YXIgbWV0aG9kID0gJChjb250ZXh0KS5hdHRyKCdkYXRhLW1ldGhvZCcpIHx8ICQoY29udGV4dCkuYXR0cignbWV0aG9kJykgfHwgJ0dFVCc7XHJcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9ICQoY29udGV4dCkuYXR0cignZGF0YS1zdGF0ZScpO1xyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIGlmICgkKGNvbnRleHQpLmlzKCdmb3JtJykpIHtcclxuICAgICAgICAgICAgICAgIHZhciBEYXRhID0gbmV3IEZvcm1EYXRhKGNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7fTtcclxuICAgICAgICAgICAgICAgIGlmICgkKGNvbnRleHQpLmF0dHIoJ2VuY3R5cGUnKSA9PSAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScgfHwgJCgnaW5wdXQ6ZmlsZScsIGNvbnRleHQpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSBEYXRhO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBEYXRhLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbbmFtZV0gPSAvXFxbLipcXF0kLy50ZXN0KG5hbWUpID8gRGF0YS5nZXRBbGwobmFtZSkgOiBEYXRhLmdldChuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHN0YXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkKGNvbnRleHQpLmFkZENsYXNzKCdsaWpheC1zZW5kaW5nJyk7XHJcbiAgICAgICAgICAgICAgICAkKCdpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYnV0dG9uJywgY29udGV4dCkubm90KCc6ZGlzYWJsZWQnKS5hZGRDbGFzcygnbGlqYXgtZGlzYWJsZScpLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgICAgICAkKGNvbnRleHQpLm9uKCdzdGF0aW86ZG9uZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkKCcubGlqYXgtZGlzYWJsZScsIHRoaXMpLnJlbW92ZUNsYXNzKCdsaWpheC1kaXNhYmxlJykucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdsaWpheC1zZW5kaW5nJyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gJChjb250ZXh0KS52YWwoKSB8fCAkKGNvbnRleHQpLmF0dHIoJ2RhdGEtdmFsdWUnKSB8fCBudWxsO1xyXG4gICAgICAgICAgICAgICAgaWYgKCQoY29udGV4dCkuaXMoJzpjaGVja2JveCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAkKGNvbnRleHQpLmlzKCc6Y2hlY2tlZCcpID8gMSA6IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYmFja192YWx1ZSA9PSB2YWx1ZSAmJiAkKGNvbnRleHQpLmlzKCdpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCcpICYmICFvbkZpcmUpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGJhY2tfdmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge307XHJcbiAgICAgICAgICAgICAgICBkYXRhW25hbWVdID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCQoY29udGV4dCkuYXR0cignZGF0YS1xdWVyeScpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9uX3F1ZXJ5ID0gdXJsLnBhcnNlKGFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0YV9xdWVyeSA9IHVybC5wYXJzZSgnPycgKyAkKGNvbnRleHQpLmF0dHIoJ2RhdGEtcXVlcnknKSk7XHJcbiAgICAgICAgICAgICAgICBhY3Rpb25fcXVlcnkuZ2V0ID0gJC5leHRlbmQobnVsbCwgYWN0aW9uX3F1ZXJ5LmdldCB8fCB7fSwgZGF0YV9xdWVyeS5nZXQpO1xyXG4gICAgICAgICAgICAgICAgYWN0aW9uID0gdXJsLmJ1aWxkKGFjdGlvbl9xdWVyeSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGhlYWRlcnMgPSB7fTtcclxuICAgICAgICAgICAgaWYgKCQoY29udGV4dCkuYXR0cignZGF0YS14aHJCYXNlJykpIHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcnMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ0RhdGEteGhyLWJhc2UnOiAkKGNvbnRleHQpLmF0dHIoJ2RhdGEteGhyQmFzZScpXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG5ldyBTdGF0aW8oe1xyXG4gICAgICAgICAgICAgICAgdHlwZTogc3RhdGUgPyAnYm90aCcgOiAncmVuZGVyJyxcclxuICAgICAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXHJcbiAgICAgICAgICAgICAgICBhamF4OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6ICQoY29udGV4dCkuaXMoJ2Zvcm0nKSAmJiAoJChjb250ZXh0KS5hdHRyKCdlbmN0eXBlJykgPT0gJ211bHRpcGFydC9mb3JtLWRhdGEnIHx8ICQoJ2lucHV0OmZpbGUnLCBjb250ZXh0KS5sZW5ndGgpID8gZmFsc2UgOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04JyxcclxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzRGF0YTogJChjb250ZXh0KS5pcygnZm9ybScpICYmICgkKGNvbnRleHQpLmF0dHIoJ2VuY3R5cGUnKSA9PSAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScgfHwgJCgnaW5wdXQ6ZmlsZScsIGNvbnRleHQpLmxlbmd0aCkgPyBmYWxzZSA6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FjaGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVyc1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHVybDogYWN0aW9uXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvbkZpcmUpIHtcclxuICAgICAgICAgICAgc2VuZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHdpbmRvdy5MaWpheCA9IGxpamF4O1xyXG59KSgpO1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF9nbG9iYWxzID0ge1xyXG4gICAgICAgIHRpdGxlOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgJCgndGl0bGUnKS5odG1sKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBfYWpheCA9IHtcclxuICAgICAgICB0eXBlOiAnR0VUJyxcclxuICAgICAgICBjYWNoZTogZmFsc2VcclxuICAgIH07XHJcblxyXG4gICAgdmFyIF9vcHRpb25zID0ge1xyXG4gICAgICAgIG9iamVjdDogbnVsbCxcclxuICAgICAgICB0aXRsZTogbnVsbCxcclxuICAgICAgICBhamF4OiBfYWpheCxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTZW5kIHJlcXVlc3QgYW5kIGNoYW5nZSB1cmwgd2l0aCByZXNwb25zZSByZW5kZXJpbmdcclxuICAgICAgICAgKiBAZGVmYXVsdCBib3RoXHJcbiAgICAgICAgICogYm90aDogY2hhbmdlIHVybCBhbmQgcmVuZGVyIHJlc3BvbnNlXHJcbiAgICAgICAgICogdXJsOiBPbmx5IHNlbmQgcmVxdWVzdCBhbmQgY2hhZ2UgdXJsIHdpdGhvdXQgY2hhbmdlIHJlbmRlcmluZ1xyXG4gICAgICAgICAqIHJlbmRlcjogT25seSBzZW5kIHJlcXVlc3QgYW5kIHJlbmRlciByZXBzb25zZSB3aXRob3V0IGNoYW5nZSB1cmxcclxuICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHR5cGU6ICdib3RoJyxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBkb250IHNlbmQgYW55IHJlcXVlc3RcclxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBmYWtlOiBmYWxzZSxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBhamF4IHJlc3BvbnNlIGNvbnRldG50XHJcbiAgICAgICAgICogaWYge2Zha2U6dHJ1ZX0gb3Ige3Jlc3BvbnNlIDogbm90bnVsbH0gcmVzcG9uc2UgcmVuZGVyIHRoaXMgcHJvcGVydHlcclxuICAgICAgICAgKiBAdHlwZSB7W3R5cGVdfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlc3BvbnNlOiBudWxsLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIHJlcGxhY2Ugc3RhdGVcclxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICByZXBsYWNlOiBmYWxzZSxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBldmVudCBjb250ZXh0XHJcbiAgICAgICAgICogQHR5cGUge0RPTX0ge2pRdWVyeX0ge1NlbGVjdG9yIHN0cmluZ31cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb250ZXh0OiBkb2N1bWVudFxyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBzdGF0aW8oY3VzdG9tKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjdXN0b20gIT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgY3VzdG9tID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjdXN0b20uYWpheCA9ICQuZXh0ZW5kKHt9LCBfYWpheCwgY3VzdG9tLmFqYXgpO1xyXG4gICAgICAgIGN1c3RvbS5hamF4LnVybCA9IGN1c3RvbS51cmw7XHJcbiAgICAgICAgY3VzdG9tLmdsb2JhbHMgPSAkLmV4dGVuZCh7fSwgX2dsb2JhbHMsIGN1c3RvbS5nbG9iYWxzKTtcclxuICAgICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBfb3B0aW9ucywgY3VzdG9tKTtcclxuXHJcbiAgICAgICAgdmFyIHJlc3BvbnNlID0ge1xyXG4gICAgICAgICAgICBib2R5OiBvcHRpb25zLnJlc3BvbnNlLFxyXG4gICAgICAgICAgICBkYXRhOiB7fVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmICghKG9wdGlvbnMuY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSkpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5jb250ZXh0ID0gJChvcHRpb25zLmNvbnRleHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJChkb2N1bWVudCkudHJpZ2dlcignc3RhdGlvOmdsb2JhbDppbml0JywgW29wdGlvbnMuY29udGV4dF0pO1xyXG4gICAgICAgIG9wdGlvbnMuY29udGV4dC50cmlnZ2VyKCdzdGF0aW86aW5pdCcpO1xyXG5cclxuICAgICAgICB2YXIgYWpheF9kYXRhID0gbnVsbDtcclxuICAgICAgICB2YXIgYWpheF9zZW5kX3VybCA9IG51bGw7XHJcbiAgICAgICAgaWYgKCFvcHRpb25zLmZha2UpIHtcclxuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmFqYXguY29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYWpheC5jb21wbGV0ZSA9IGFqeF9jb21wbGV0ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgYmVmb3JlU2VuZCA9IG9wdGlvbnMuYWpheC5iZWZvcmVTZW5kO1xyXG4gICAgICAgICAgICBvcHRpb25zLmFqYXguYmVmb3JlU2VuZCA9IGZ1bmN0aW9uIChqcVhIUiwgc2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgICAgIGFqYXhfZGF0YSA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICBhamF4X3NlbmRfdXJsID0gdGhpcy51cmw7XHJcbiAgICAgICAgICAgICAgICB2YXIgdXJseCA9IHVybC5wYXJzZShhamF4X3NlbmRfdXJsKTtcclxuICAgICAgICAgICAgICAgIGlmICh1cmx4LmdldCAmJiB1cmx4LmdldC5fKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHVybHguZ2V0Ll87XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgZ2V0ID0gdXJsLmJ1aWxkZ2V0KHVybHguZ2V0KTtcclxuICAgICAgICAgICAgICAgIGFqYXhfc2VuZF91cmwgPSB1cmx4LnVybC5yZXBsYWNlKC9cXD8oLiopJC8sIGdldCA/ICc/JyArIGdldCA6ICcnKTtcclxuICAgICAgICAgICAgICAgIGJlZm9yZVNlbmQgPyBiZWZvcmVTZW5kLmNhbGwodGhpcywganFYSFIsIHNldHRpbmdzKSA6IG51bGw7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICQuYWpheChvcHRpb25zLmFqYXgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy50eXBlICE9ICd1cmwnICYmIHJlc3BvbnNlLmJvZHkpIHtcclxuICAgICAgICAgICAgcmVzcG9uc2VfcGFyc2UoKTtcclxuICAgICAgICAgICAgcmVuZGVyKCk7XHJcbiAgICAgICAgICAgICQoZG9jdW1lbnQpLnRyaWdnZXIoJ3N0YXRpbzpnbG9iYWw6ZG9uZScsIFtvcHRpb25zLmNvbnRleHRdKTtcclxuICAgICAgICAgICAgb3B0aW9ucy5jb250ZXh0LnRyaWdnZXIoJ3N0YXRpbzpkb25lJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJChkb2N1bWVudCkudHJpZ2dlcignc3RhdGlvOmdsb2JhbDpkb25lJywgW29wdGlvbnMuY29udGV4dF0pO1xyXG4gICAgICAgICAgICBvcHRpb25zLmNvbnRleHQudHJpZ2dlcignc3RhdGlvOmRvbmUnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGFqeF9jb21wbGV0ZShqcVhIUiwgdGV4dFN0YXR1cykge1xyXG4gICAgICAgICAgICBpZiAoanFYSFIucmVzcG9uc2VKU09OKSB7XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZS5kYXRhID0ganFYSFIucmVzcG9uc2VKU09OO1xyXG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkudHJpZ2dlcignc3RhdGlvOmdsb2JhbDpqc29uUmVzcG9uc2UnLCBbb3B0aW9ucy5jb250ZXh0LCBqcVhIUi5yZXNwb25zZUpTT04sIGpxWEhSXSk7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmNvbnRleHQudHJpZ2dlcignc3RhdGlvOmpzb25SZXNwb25zZScsIFtqcVhIUi5yZXNwb25zZUpTT04sIGpxWEhSXSk7XHJcbiAgICAgICAgICAgICAgICBuZXcgSlJlc3Aob3B0aW9ucy5jb250ZXh0LCByZXNwb25zZS5kYXRhKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlc3BvbnNlLmJvZHkgPSBqcVhIUi5yZXNwb25zZVRleHQ7XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZV9wYXJzZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRleHRTdGF0dXMgPT0gJ3N1Y2Nlc3MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMudHlwZSAhPSAncmVuZGVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5yZXBsYWNlID8gaGlzdG9yeS5yZXBsYWNlU3RhdGUob3B0aW9ucy5kYXRhLCBvcHRpb25zLnRpdGxlLCBhamF4X3NlbmRfdXJsIHx8IG9wdGlvbnMudXJsKSA6IGhpc3RvcnkucHVzaFN0YXRlKG9wdGlvbnMuZGF0YSwgb3B0aW9ucy50aXRsZSwgYWpheF9zZW5kX3VybCB8fCBvcHRpb25zLnVybCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgJChkb2N1bWVudCkudHJpZ2dlcignc3RhdGlvOmdsb2JhbDpzdWNjZXNzJywgW29wdGlvbnMuY29udGV4dCwgcmVzcG9uc2UuZGF0YSwgcmVzcG9uc2UuYm9keSwganFYSFJdKTtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmNvbnRleHQudHJpZ2dlcignc3RhdGlvOnN1Y2Nlc3MnLCBbcmVzcG9uc2UuZGF0YSwgcmVzcG9uc2UuYm9keSwganFYSFJdKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy50eXBlICE9ICd1cmwnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJChkb2N1bWVudCkudHJpZ2dlcignc3RhdGlvOmdsb2JhbDplcnJvclJlc3BvbnNlJywgW29wdGlvbnMuY29udGV4dCwgcmVzcG9uc2UuZGF0YSwgcmVzcG9uc2UuYm9keSwganFYSFJdKTtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmNvbnRleHQudHJpZ2dlcignc3RhdGlvOmVycm9yUmVzcG9uc2UnLCBbcmVzcG9uc2UuZGF0YSwgcmVzcG9uc2UuYm9keSwganFYSFJdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkKGRvY3VtZW50KS50cmlnZ2VyKCdzdGF0aW86Z2xvYmFsOmRvbmUnLCBbb3B0aW9ucy5jb250ZXh0LCByZXNwb25zZS5kYXRhLCByZXNwb25zZS5ib2R5LCBqcVhIUl0pO1xyXG4gICAgICAgICAgICBvcHRpb25zLmNvbnRleHQudHJpZ2dlcignc3RhdGlvOmRvbmUnLCBbcmVzcG9uc2UuZGF0YSwgcmVzcG9uc2UuYm9keSwganFYSFJdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlc3BvbnNlX3BhcnNlKCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlc3BvbnNlLmJvZHkgPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNwbGl0ID0gcmVzcG9uc2UuYm9keS5zcGxpdChcIlxcblwiKTtcclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5kYXRhID0gSlNPTi5wYXJzZShzcGxpdFswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuYm9keSA9IHNwbGl0Lmxlbmd0aCA+IDEgPyAkKCQucGFyc2VIVE1MKHNwbGl0LnNwbGljZSgxKS5qb2luKFwiXCIpKSkgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmJvZHkgPSAkKCQucGFyc2VIVE1MKHJlc3BvbnNlLmJvZHkpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcmVzcG9uc2UuYm9keSA9PSAnb2JqZWN0JyAmJiByZXNwb25zZS5ib2R5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5ib2R5IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5ib2R5ID0gJChyZXNwb25zZS5ib2R5KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuYm9keSBpbnN0YW5jZW9mIGpRdWVyeSkge30gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YSA9IHJlc3BvbnNlLmJvZHk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuYm9keSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlbmRlcigpIHtcclxuICAgICAgICAgICAgZm9yIChEIGluIHJlc3BvbnNlLmRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmdsb2JhbHNbRF0pIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmdsb2JhbHNbRF0ocmVzcG9uc2UuZGF0YVtEXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmJvZHkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjaGFuZ2VkID0gW107XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZS5ib2R5LmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBiYXNlID0gJCh0aGlzKS5hdHRyKCdkYXRhLXhocicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChiYXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZWQucHVzaCgkKFwiW2RhdGEteGhyPSdcIiArIGJhc2UgKyBcIiddXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJChcIltkYXRhLXhocj0nXCIgKyBiYXNlICsgXCInXVwiKS5odG1sKCQodGhpcykuaHRtbCgpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLnRyaWdnZXIoJ3N0YXRpbzpnbG9iYWw6cmVuZGVyUmVzcG9uc2UnLCBbJChjaGFuZ2VkKSwgb3B0aW9ucy5jb250ZXh0LCByZXNwb25zZS5kYXRhLCByZXNwb25zZS5ib2R5XSk7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmNvbnRleHQudHJpZ2dlcignc3RhdGlvOnJlbmRlclJlc3BvbnNlJywgWyQoY2hhbmdlZCksIHJlc3BvbnNlLmRhdGEsIHJlc3BvbnNlLmJvZHldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIHdpbmRvdy5TdGF0aW8gPSBzdGF0aW87XHJcbiAgICAvKipcclxuICAgICAqIGZvciBuZXcgY2hyb21lIGJ1Z1xyXG4gICAgICovXHJcbiAgICBuZXcgU3RhdGlvKHtcclxuICAgICAgICB1cmw6IGxvY2F0aW9uLmhyZWYsXHJcbiAgICAgICAgZmFrZTogdHJ1ZSxcclxuICAgICAgICByZXBsYWNlOiB0cnVlXHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIHBvcHN0YXRlIGV2ZW50XHJcbiAgICAgKi9cclxuICAgIHdpbmRvdy5vbnBvcHN0YXRlID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgbmV3IFN0YXRpbyh7XHJcbiAgICAgICAgICAgIHVybDogbG9jYXRpb24uaHJlZixcclxuICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxufSkoKTtcclxuXHJcbi8vIENvcHlyaWdodCAyMDEzLTIwMTQgS2V2aW4gQ294XHJcblxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxyXG4qICBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZCAgICAgICAgICAgKlxyXG4qICB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXMgICAgICAgKlxyXG4qICBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxyXG4qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxyXG4qICBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSwgICAgICAgKlxyXG4qICBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0ICAgICAgKlxyXG4qICBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxyXG4qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxyXG4qICAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdCAgICAgKlxyXG4qICAgICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZSBpbiAgKlxyXG4qICAgICBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmUgICAgICAgKlxyXG4qICAgICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxyXG4qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxyXG4qICAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZSAgKlxyXG4qICAgICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxyXG4qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxyXG4qICAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLiAgKlxyXG4qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuK2Z1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBhcnJheSA9IC9cXFsoW15cXFtdKilcXF0kLztcclxuXHJcbiAgICAvLy8gVVJMIFJlZ2V4LlxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIHJlZ2V4IHNwbGl0cyB0aGUgVVJMIGludG8gcGFydHMuICBUaGUgY2FwdHVyZSBncm91cHMgY2F0Y2ggdGhlIGltcG9ydGFudFxyXG4gICAgICogYml0cy5cclxuICAgICAqXHJcbiAgICAgKiBFYWNoIHNlY3Rpb24gaXMgb3B0aW9uYWwsIHNvIHRvIHdvcmsgb24gYW55IHBhcnQgZmluZCB0aGUgY29ycmVjdCB0b3AgbGV2ZWxcclxuICAgICAqIGAoLi4uKT9gIGFuZCBtZXNzIGFyb3VuZCB3aXRoIGl0LlxyXG4gICAgICovXHJcbiAgICB2YXIgcmVnZXggPSAvXig/OihbYS16XSopOik/KD86XFwvXFwvKT8oPzooW146QF0qKSg/OjooW15AXSopKT9AKT8oWzAtOWEtei0uX10rKT8oPzo6KFswLTldKikpPyhcXC9bXj8jXSopPyg/OlxcPyhbXiNdKikpPyg/OiMoLiopKT8kL2k7XHJcbiAgICAvLyAgICAgICAgICAgICAgIDEgLSBzY2hlbWUgICAgICAgICAgICAgIDIgLSB1c2VyICAgIDMgPSBwYXNzICAgIDQgLSBob3N0ICAgICAgICAgICA1IC0gcG9ydCAgNiAtIHBhdGggICAgICAgIDcgLSBxdWVyeSAgICA4IC0gaGFzaFxyXG5cclxuICAgIHZhciBub3NsYXNoID0gW1wibWFpbHRvXCIsIFwiYml0Y29pblwiXTtcclxuXHJcbiAgICB2YXIgc2VsZiA9IHtcclxuICAgICAgICAvKiogUGFyc2UgYSBxdWVyeSBzdHJpbmcuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBUaGlzIGZ1bmN0aW9uIHBhcnNlcyBhIHF1ZXJ5IHN0cmluZyAoc29tZXRpbWVzIGNhbGxlZCB0aGUgc2VhcmNoXHJcbiAgICAgICAgICogc3RyaW5nKS4gIEl0IHRha2VzIGEgcXVlcnkgc3RyaW5nIGFuZCByZXR1cm5zIGEgbWFwIG9mIHRoZSByZXN1bHRzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogS2V5cyBhcmUgY29uc2lkZXJlZCB0byBiZSBldmVyeXRoaW5nIHVwIHRvIHRoZSBmaXJzdCAnPScgYW5kIHZhbHVlcyBhcmVcclxuICAgICAgICAgKiBldmVyeXRoaW5nIGFmdGVyd29yZHMuICBTaW5jZSBVUkwtZGVjb2RpbmcgaXMgZG9uZSBhZnRlciBwYXJzaW5nLCBrZXlzXHJcbiAgICAgICAgICogYW5kIHZhbHVlcyBjYW4gaGF2ZSBhbnkgdmFsdWVzLCBob3dldmVyLCAnPScgaGF2ZSB0byBiZSBlbmNvZGVkIGluIGtleXNcclxuICAgICAgICAgKiB3aGlsZSAnPycgYW5kICcmJyBoYXZlIHRvIGJlIGVuY29kZWQgYW55d2hlcmUgKGFzIHRoZXkgZGVsaW1pdCB0aGVcclxuICAgICAgICAgKiBrdi1wYWlycykuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBLZXlzIGFuZCB2YWx1ZXMgd2lsbCBhbHdheXMgYmUgc3RyaW5ncywgZXhjZXB0IGlmIHRoZXJlIGlzIGEga2V5IHdpdGggbm9cclxuICAgICAgICAgKiAnPScgaW4gd2hpY2ggY2FzZSBpdCB3aWxsIGJlIGNvbnNpZGVyZWQgYSBmbGFnIGFuZCB3aWxsIGJlIHNldCB0byB0cnVlLlxyXG4gICAgICAgICAqIExhdGVyIHZhbHVlcyB3aWxsIG92ZXJyaWRlIGVhcmxpZXIgdmFsdWVzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQXJyYXkga2V5cyBhcmUgYWxzbyBzdXBwb3J0ZWQuICBCeSBkZWZhdWx0IGtleXMgaW4gdGhlIGZvcm0gb2YgYG5hbWVbaV1gXHJcbiAgICAgICAgICogd2lsbCBiZSByZXR1cm5lZCBsaWtlIHRoYXQgYXMgc3RyaW5ncy4gIEhvd2V2ZXIsIGlmIHlvdSBzZXQgdGhlIGBhcnJheWBcclxuICAgICAgICAgKiBmbGFnIGluIHRoZSBvcHRpb25zIG9iamVjdCB0aGV5IHdpbGwgYmUgcGFyc2VkIGludG8gYXJyYXlzLiAgTm90ZSB0aGF0XHJcbiAgICAgICAgICogYWx0aG91Z2ggdGhlIG9iamVjdCByZXR1cm5lZCBpcyBhbiBgQXJyYXlgIG9iamVjdCBhbGwga2V5cyB3aWxsIGJlXHJcbiAgICAgICAgICogd3JpdHRlbiB0byBpdC4gIFRoaXMgbWVhbnMgdGhhdCBpZiB5b3UgaGF2ZSBhIGtleSBzdWNoIGFzIGBrW2ZvckVhY2hdYFxyXG4gICAgICAgICAqIGl0IHdpbGwgb3ZlcndyaXRlIHRoZSBgZm9yRWFjaGAgZnVuY3Rpb24gb24gdGhhdCBhcnJheS4gIEFsc28gbm90ZSB0aGF0XHJcbiAgICAgICAgICogc3RyaW5nIHByb3BlcnRpZXMgYWx3YXlzIHRha2UgcHJlY2VkZW5jZSBvdmVyIGFycmF5IHByb3BlcnRpZXMsXHJcbiAgICAgICAgICogaXJyZXNwZWN0aXZlIG9mIHdoZXJlIHRoZXkgYXJlIGluIHRoZSBxdWVyeSBzdHJpbmcuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiAgIHVybC5nZXQoXCJhcnJheVsxXT10ZXN0JmFycmF5W2Zvb109YmFyXCIse2FycmF5OnRydWV9KS5hcnJheVsxXSAgPT09IFwidGVzdFwiXHJcbiAgICAgICAgICogICB1cmwuZ2V0KFwiYXJyYXlbMV09dGVzdCZhcnJheVtmb29dPWJhclwiLHthcnJheTp0cnVlfSkuYXJyYXkuZm9vID09PSBcImJhclwiXHJcbiAgICAgICAgICogICB1cmwuZ2V0KFwiYXJyYXk9bm90YW5hcnJheSZhcnJheVswXT0xXCIse2FycmF5OnRydWV9KS5hcnJheSAgICAgID09PSBcIm5vdGFuYXJyYXlcIlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogSWYgYXJyYXkgcGFyc2luZyBpcyBlbmFibGVkIGtleXMgaW4gdGhlIGZvcm0gb2YgYG5hbWVbXWAgd2lsbFxyXG4gICAgICAgICAqIGF1dG9tYXRpY2FsbHkgYmUgZ2l2ZW4gdGhlIG5leHQgYXZhaWxhYmxlIGluZGV4LiAgTm90ZSB0aGF0IHRoaXMgY2FuIGJlXHJcbiAgICAgICAgICogb3ZlcndyaXR0ZW4gd2l0aCBsYXRlciB2YWx1ZXMgaW4gdGhlIHF1ZXJ5IHN0cmluZy4gIEZvciB0aGlzIHJlYXNvbiBpc1xyXG4gICAgICAgICAqIGlzIGJlc3Qgbm90IHRvIG1peCB0aGUgdHdvIGZvcm1hdHMsIGFsdGhvdWdoIGl0IGlzIHNhZmUgKGFuZCBvZnRlblxyXG4gICAgICAgICAqIHVzZWZ1bCkgdG8gYWRkIGFuIGF1dG9tYXRpYyBpbmRleCBhcmd1bWVudCB0byB0aGUgZW5kIG9mIGEgcXVlcnkgc3RyaW5nLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogICB1cmwuZ2V0KFwiYVtdPTAmYVtdPTEmYVswXT0yXCIsIHthcnJheTp0cnVlfSkgIC0+IHthOltcIjJcIixcIjFcIl19O1xyXG4gICAgICAgICAqICAgdXJsLmdldChcImFbMF09MCZhWzFdPTEmYVtdPTJcIiwge2FycmF5OnRydWV9KSAtPiB7YTpbXCIwXCIsXCIxXCIsXCIyXCJdfTtcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbXtzdHJpbmd9IHEgVGhlIHF1ZXJ5IHN0cmluZyAodGhlIHBhcnQgYWZ0ZXIgdGhlICc/JykuXHJcbiAgICAgICAgICogQHBhcmFte3tmdWxsOmJvb2xlYW4sYXJyYXk6Ym9vbGVhbn09fSBvcHQgT3B0aW9ucy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIC0gZnVsbDogSWYgc2V0IGBxYCB3aWxsIGJlIHRyZWF0ZWQgYXMgYSBmdWxsIHVybCBhbmQgYHFgIHdpbGwgYmUgYnVpbHQuXHJcbiAgICAgICAgICogICBieSBjYWxsaW5nICNwYXJzZSB0byByZXRyaWV2ZSB0aGUgcXVlcnkgcG9ydGlvbi5cclxuICAgICAgICAgKiAtIGFycmF5OiBJZiBzZXQga2V5cyBpbiB0aGUgZm9ybSBvZiBga2V5W2ldYCB3aWxsIGJlIHRyZWF0ZWRcclxuICAgICAgICAgKiAgIGFzIGFycmF5cy9tYXBzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJldHVybnshT2JqZWN0LjxzdHJpbmcsIHN0cmluZ3xBcnJheT59IFRoZSBwYXJzZWQgcmVzdWx0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFwiZ2V0XCI6IGZ1bmN0aW9uIChxLCBvcHQpIHtcclxuICAgICAgICAgICAgcSA9IHEgfHwgXCJcIjtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHQgPT0gXCJ1bmRlZmluZWRcIikgb3B0ID0ge307XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0W1wiZnVsbFwiXSA9PSBcInVuZGVmaW5lZFwiKSBvcHRbXCJmdWxsXCJdID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0W1wiYXJyYXlcIl0gPT0gXCJ1bmRlZmluZWRcIikgb3B0W1wiYXJyYXlcIl0gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRbXCJmdWxsXCJdID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBxID0gc2VsZltcInBhcnNlXCJdKHEsIHsgXCJnZXRcIjogZmFsc2UgfSlbXCJxdWVyeVwiXSB8fCBcIlwiO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgbyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgdmFyIGMgPSBxLnNwbGl0KFwiJlwiKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNbaV0ubGVuZ3RoKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZCA9IGNbaV0uaW5kZXhPZihcIj1cIik7XHJcbiAgICAgICAgICAgICAgICB2YXIgayA9IGNbaV0sXHJcbiAgICAgICAgICAgICAgICAgICAgdiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoZCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgayA9IGNbaV0uc3Vic3RyKDAsIGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHYgPSBjW2ldLnN1YnN0cihkICsgMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHYgPSBkZWNvZGVVUklDb21wb25lbnQodik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdFtcImFycmF5XCJdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZHMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJvID0gbztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VyayA9IGs7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGluZCA9IGN1cmsubWF0Y2goYXJyYXkpKSAvLyBBcnJheSFcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cmsgPSBjdXJrLnN1YnN0cigwLCBpbmQuaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRzLnVuc2hpZnQoZGVjb2RlVVJJQ29tcG9uZW50KGluZFsxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjdXJrID0gZGVjb2RlVVJJQ29tcG9uZW50KGN1cmspO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRzLnNvbWUoZnVuY3Rpb24gKGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXJvW2N1cmtdID09IFwidW5kZWZpbmVkXCIpIGN1cm9bY3Vya10gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGN1cm9bY3Vya10pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwidXJsLmdldDogQXJyYXkgcHJvcGVydHkgXCIrY3VyaytcIiBhbHJlYWR5IGV4aXN0cyBhcyBzdHJpbmchXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cm8gPSBjdXJvW2N1cmtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IFwiXCIpIGkgPSBjdXJvLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cmsgPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJvW2N1cmtdID0gdjtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBrID0gZGVjb2RlVVJJQ29tcG9uZW50KGspO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vdHlwZW9mIG9ba10gPT0gXCJ1bmRlZmluZWRcIiB8fCBjb25zb2xlLmxvZyhcIlByb3BlcnR5IFwiK2srXCIgYWxyZWFkeSBleGlzdHMhXCIpO1xyXG4gICAgICAgICAgICAgICAgb1trXSA9IHY7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBvO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKiBCdWlsZCBhIGdldCBxdWVyeSBmcm9tIGFuIG9iamVjdC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIFRoaXMgY29uc3RydWN0cyBhIHF1ZXJ5IHN0cmluZyBmcm9tIHRoZSBrdiBwYWlycyBpbiBgZGF0YWAuICBDYWxsaW5nXHJcbiAgICAgICAgICogI2dldCBvbiB0aGUgc3RyaW5nIHJldHVybmVkIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0IGlkZW50aWNhbCB0byB0aGUgb25lXHJcbiAgICAgICAgICogcGFzc2VkIGluIGV4Y2VwdCBhbGwgbm9uLWJvb2xlYW4gc2NhbGFyIHR5cGVzIGJlY29tZSBzdHJpbmdzIGFuZCBhbGxcclxuICAgICAgICAgKiBvYmplY3QgdHlwZXMgYmVjb21lIGFycmF5cyAobm9uLWludGVnZXIga2V5cyBhcmUgc3RpbGwgcHJlc2VudCwgc2VlXHJcbiAgICAgICAgICogI2dldCdzIGRvY3VtZW50YXRpb24gZm9yIG1vcmUgZGV0YWlscykuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBUaGlzIGFsd2F5cyB1c2VzIGFycmF5IHN5bnRheCBmb3IgZGVzY3JpYmluZyBhcnJheXMuICBJZiB5b3Ugd2FudCB0b1xyXG4gICAgICAgICAqIHNlcmlhbGl6ZSB0aGVtIGRpZmZlcmVudGx5IChsaWtlIGhhdmluZyB0aGUgdmFsdWUgYmUgYSBKU09OIGFycmF5IGFuZFxyXG4gICAgICAgICAqIGhhdmUgYSBwbGFpbiBrZXkpIHlvdSB3aWxsIG5lZWQgdG8gZG8gdGhhdCBiZWZvcmUgcGFzc2luZyBpdCBpbi5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEFsbCBrZXlzIGFuZCB2YWx1ZXMgYXJlIHN1cHBvcnRlZCAoYmluYXJ5IGRhdGEgYW55b25lPykgYXMgdGhleSBhcmVcclxuICAgICAgICAgKiBwcm9wZXJseSBVUkwtZW5jb2RlZCBhbmQgI2dldCBwcm9wZXJseSBkZWNvZGVzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFte09iamVjdH0gZGF0YSBUaGUga3YgcGFpcnMuXHJcbiAgICAgICAgICogQHBhcmFte3N0cmluZ30gcHJlZml4IFRoZSBwcm9wZXJseSBlbmNvZGVkIGFycmF5IGtleSB0byBwdXQgdGhlXHJcbiAgICAgICAgICogICBwcm9wZXJ0aWVzLiAgTWFpbmx5IGludGVuZGVkIGZvciBpbnRlcm5hbCB1c2UuXHJcbiAgICAgICAgICogQHJldHVybntzdHJpbmd9IEEgVVJMLXNhZmUgc3RyaW5nLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFwiYnVpbGRnZXRcIjogZnVuY3Rpb24gKGRhdGEsIHByZWZpeCkge1xyXG4gICAgICAgICAgICB2YXIgaXRtcyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlayA9IGVuY29kZVVSSUNvbXBvbmVudChrKTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJlZml4ICE9IFwidW5kZWZpbmVkXCIpIGVrID0gcHJlZml4ICsgXCJbXCIgKyBlayArIFwiXVwiO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciB2ID0gZGF0YVtrXTtcclxuXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiB2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9vbGVhbic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2KSBpdG1zLnB1c2goZWspO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdudW1iZXInOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2ID0gdi50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0bXMucHVzaChlayArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHYpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnb2JqZWN0JzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRtcy5wdXNoKHNlbGZbXCJidWlsZGdldFwiXSh2LCBlaykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaXRtcy5qb2luKFwiJlwiKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKiogUGFyc2UgYSBVUkxcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIFRoaXMgYnJlYWtzIHVwIGEgVVJMIGludG8gY29tcG9uZW50cy4gIEl0IGF0dGVtcHRzIHRvIGJlIHZlcnkgbGliZXJhbFxyXG4gICAgICAgICAqIGFuZCByZXR1cm5zIHRoZSBiZXN0IHJlc3VsdCBpbiBtb3N0IGNhc2VzLiAgVGhpcyBtZWFucyB0aGF0IHlvdSBjYW5cclxuICAgICAgICAgKiBvZnRlbiBwYXNzIGluIHBhcnQgb2YgYSBVUkwgYW5kIGdldCBjb3JyZWN0IGNhdGVnb3JpZXMgYmFjay4gIE5vdGFibHksXHJcbiAgICAgICAgICogdGhpcyB3b3JrcyBmb3IgZW1haWxzIGFuZCBKYWJiZXIgSURzLCBhcyB3ZWxsIGFzIGFkZGluZyBhICc/JyB0byB0aGVcclxuICAgICAgICAgKiBiZWdpbm5pbmcgb2YgYSBzdHJpbmcgd2lsbCBwYXJzZSB0aGUgd2hvbGUgdGhpbmcgYXMgYSBxdWVyeSBzdHJpbmcuICBJZlxyXG4gICAgICAgICAqIGFuIGl0ZW0gaXMgbm90IGZvdW5kIHRoZSBwcm9wZXJ0eSB3aWxsIGJlIHVuZGVmaW5lZC4gIEluIHNvbWUgY2FzZXMgYW5cclxuICAgICAgICAgKiBlbXB0eSBzdHJpbmcgd2lsbCBiZSByZXR1cm5lZCBpZiB0aGUgc3Vycm91bmRpbmcgc3ludGF4IGJ1dCB0aGUgYWN0dWFsXHJcbiAgICAgICAgICogdmFsdWUgaXMgZW1wdHkgKGV4YW1wbGU6IFwiOi8vZXhhbXBsZS5jb21cIiB3aWxsIGdpdmUgYSBlbXB0eSBzdHJpbmcgZm9yXHJcbiAgICAgICAgICogc2NoZW1lLikgIE5vdGFibHkgdGhlIGhvc3QgbmFtZSB3aWxsIGFsd2F5cyBiZSBzZXQgdG8gc29tZXRoaW5nLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogUmV0dXJuZWQgcHJvcGVydGllcy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIC0gKipzY2hlbWU6KiogVGhlIHVybCBzY2hlbWUuIChleDogXCJtYWlsdG9cIiBvciBcImh0dHBzXCIpXHJcbiAgICAgICAgICogLSAqKnVzZXI6KiogVGhlIHVzZXJuYW1lLlxyXG4gICAgICAgICAqIC0gKipwYXNzOioqIFRoZSBwYXNzd29yZC5cclxuICAgICAgICAgKiAtICoqaG9zdDoqKiBUaGUgaG9zdG5hbWUuIChleDogXCJsb2NhbGhvc3RcIiwgXCIxMjMuNDU2LjcuOFwiIG9yIFwiZXhhbXBsZS5jb21cIilcclxuICAgICAgICAgKiAtICoqcG9ydDoqKiBUaGUgcG9ydCwgYXMgYSBudW1iZXIuIChleDogMTMzNylcclxuICAgICAgICAgKiAtICoqcGF0aDoqKiBUaGUgcGF0aC4gKGV4OiBcIi9cIiBvciBcIi9hYm91dC5odG1sXCIpXHJcbiAgICAgICAgICogLSAqKnF1ZXJ5OioqIFwiVGhlIHF1ZXJ5IHN0cmluZy4gKGV4OiBcImZvbz1iYXImdj0xNyZmb3JtYXQ9anNvblwiKVxyXG4gICAgICAgICAqIC0gKipnZXQ6KiogVGhlIHF1ZXJ5IHN0cmluZyBwYXJzZWQgd2l0aCBnZXQuICBJZiBgb3B0LmdldGAgaXMgYGZhbHNlYCB0aGlzXHJcbiAgICAgICAgICogICB3aWxsIGJlIGFic2VudFxyXG4gICAgICAgICAqIC0gKipoYXNoOioqIFRoZSB2YWx1ZSBhZnRlciB0aGUgaGFzaC4gKGV4OiBcIm15YW5jaG9yXCIpXHJcbiAgICAgICAgICogICBiZSB1bmRlZmluZWQgZXZlbiBpZiBgcXVlcnlgIGlzIHNldC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbXtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHBhcnNlLlxyXG4gICAgICAgICAqIEBwYXJhbXt7Z2V0Ok9iamVjdH09fSBvcHQgT3B0aW9uczpcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIC0gZ2V0OiBBbiBvcHRpb25zIGFyZ3VtZW50IHRvIGJlIHBhc3NlZCB0byAjZ2V0IG9yIGZhbHNlIHRvIG5vdCBjYWxsICNnZXQuXHJcbiAgICAgICAgICogICAgKipETyBOT1QqKiBzZXQgYGZ1bGxgLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJldHVybnshT2JqZWN0fSBBbiBvYmplY3Qgd2l0aCB0aGUgcGFyc2VkIHZhbHVlcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBcInBhcnNlXCI6IGZ1bmN0aW9uICh1cmwsIG9wdCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHQgPT0gXCJ1bmRlZmluZWRcIikgb3B0ID0ge307XHJcblxyXG4gICAgICAgICAgICB2YXIgbWQgPSB1cmwubWF0Y2gocmVnZXgpIHx8IFtdO1xyXG5cclxuICAgICAgICAgICAgdmFyIHIgPSB7XHJcbiAgICAgICAgICAgICAgICBcInVybFwiOiB1cmwsXHJcblxyXG4gICAgICAgICAgICAgICAgXCJzY2hlbWVcIjogbWRbMV0sXHJcbiAgICAgICAgICAgICAgICBcInVzZXJcIjogbWRbMl0sXHJcbiAgICAgICAgICAgICAgICBcInBhc3NcIjogbWRbM10sXHJcbiAgICAgICAgICAgICAgICBcImhvc3RcIjogbWRbNF0sXHJcbiAgICAgICAgICAgICAgICBcInBvcnRcIjogbWRbNV0gJiYgK21kWzVdLFxyXG4gICAgICAgICAgICAgICAgXCJwYXRoXCI6IG1kWzZdLFxyXG4gICAgICAgICAgICAgICAgXCJxdWVyeVwiOiBtZFs3XSxcclxuICAgICAgICAgICAgICAgIFwiaGFzaFwiOiBtZFs4XVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKG9wdC5nZXQgIT09IGZhbHNlKSByW1wiZ2V0XCJdID0gcltcInF1ZXJ5XCJdICYmIHNlbGZbXCJnZXRcIl0ocltcInF1ZXJ5XCJdLCBvcHQuZ2V0KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKiBCdWlsZCBhIFVSTCBmcm9tIGNvbXBvbmVudHMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBUaGlzIHBpZWNlcyB0b2dldGhlciBhIHVybCBmcm9tIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBwYXNzZWQgaW4gb2JqZWN0LlxyXG4gICAgICAgICAqIEluIGdlbmVyYWwgcGFzc2luZyB0aGUgcmVzdWx0IG9mIGBwYXJzZSgpYCBzaG91bGQgcmV0dXJuIHRoZSBVUkwuICBUaGVyZVxyXG4gICAgICAgICAqIG1heSBkaWZmZXJlbmNlcyBpbiB0aGUgZ2V0IHN0cmluZyBhcyB0aGUga2V5cyBhbmQgdmFsdWVzIG1pZ2h0IGJlIG1vcmVcclxuICAgICAgICAgKiBlbmNvZGVkIHRoZW4gdGhleSB3ZXJlIG9yaWdpbmFsbHkgd2VyZS4gIEhvd2V2ZXIsIGNhbGxpbmcgYGdldCgpYCBvbiB0aGVcclxuICAgICAgICAgKiB0d28gdmFsdWVzIHNob3VsZCB5aWVsZCB0aGUgc2FtZSByZXN1bHQuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBIZXJlIGlzIGhvdyB0aGUgcGFyYW1ldGVycyBhcmUgdXNlZC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqICAtIHVybDogVXNlZCBvbmx5IGlmIG5vIG90aGVyIHZhbHVlcyBhcmUgcHJvdmlkZWQuICBJZiB0aGF0IGlzIHRoZSBjYXNlXHJcbiAgICAgICAgICogICAgIGB1cmxgIHdpbGwgYmUgcmV0dXJuZWQgdmVyYmF0aW0uXHJcbiAgICAgICAgICogIC0gc2NoZW1lOiBVc2VkIGlmIGRlZmluZWQuXHJcbiAgICAgICAgICogIC0gdXNlcjogVXNlZCBpZiBkZWZpbmVkLlxyXG4gICAgICAgICAqICAtIHBhc3M6IFVzZWQgaWYgZGVmaW5lZC5cclxuICAgICAgICAgKiAgLSBob3N0OiBVc2VkIGlmIGRlZmluZWQuXHJcbiAgICAgICAgICogIC0gcGF0aDogVXNlZCBpZiBkZWZpbmVkLlxyXG4gICAgICAgICAqICAtIHF1ZXJ5OiBVc2VkIG9ubHkgaWYgYGdldGAgaXMgbm90IHByb3ZpZGVkIGFuZCBub24tZW1wdHkuXHJcbiAgICAgICAgICogIC0gZ2V0OiBVc2VkIGlmIG5vbi1lbXB0eS4gIFBhc3NlZCB0byAjYnVpbGRnZXQgYW5kIHRoZSByZXN1bHQgaXMgdXNlZFxyXG4gICAgICAgICAqICAgIGFzIHRoZSBxdWVyeSBzdHJpbmcuXHJcbiAgICAgICAgICogIC0gaGFzaDogVXNlZCBpZiBkZWZpbmVkLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogVGhlc2UgYXJlIHRoZSBvcHRpb25zIHRoYXQgYXJlIHZhbGlkIG9uIHRoZSBvcHRpb25zIG9iamVjdC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqICAtIHVzZWVtcHR5Z2V0OiBJZiB0cnV0aHksIGEgcXVlc3Rpb24gbWFyayB3aWxsIGJlIGFwcGVuZGVkIGZvciBlbXB0eSBnZXRcclxuICAgICAgICAgKiAgICBzdHJpbmdzLiAgVGhpcyBub3RhYmx5IG1ha2VzIGBidWlsZCgpYCBhbmQgYHBhcnNlKClgIGZ1bGx5IHN5bW1ldHJpYy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbXtPYmplY3R9IGRhdGEgVGhlIHBpZWNlcyBvZiB0aGUgVVJMLlxyXG4gICAgICAgICAqIEBwYXJhbXtPYmplY3R9IG9wdCBPcHRpb25zIGZvciBidWlsZGluZyB0aGUgdXJsLlxyXG4gICAgICAgICAqIEByZXR1cm57c3RyaW5nfSBUaGUgVVJMLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFwiYnVpbGRcIjogZnVuY3Rpb24gKGRhdGEsIG9wdCkge1xyXG4gICAgICAgICAgICBvcHQgPSBvcHQgfHwge307XHJcblxyXG4gICAgICAgICAgICB2YXIgciA9IFwiXCI7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbXCJzY2hlbWVcIl0gIT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgciArPSBkYXRhW1wic2NoZW1lXCJdO1xyXG4gICAgICAgICAgICAgICAgciArPSBub3NsYXNoLmluZGV4T2YoZGF0YVtcInNjaGVtZVwiXSkgPj0gMCA/IFwiOlwiIDogXCI6Ly9cIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbXCJ1c2VyXCJdICE9IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgIHIgKz0gZGF0YVtcInVzZXJcIl07XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbXCJwYXNzXCJdID09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByICs9IFwiQFwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtcInBhc3NcIl0gIT0gXCJ1bmRlZmluZWRcIikgciArPSBcIjpcIiArIGRhdGFbXCJwYXNzXCJdICsgXCJAXCI7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtcImhvc3RcIl0gIT0gXCJ1bmRlZmluZWRcIikgciArPSBkYXRhW1wiaG9zdFwiXTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW1wicG9ydFwiXSAhPSBcInVuZGVmaW5lZFwiKSByICs9IFwiOlwiICsgZGF0YVtcInBvcnRcIl07XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtcInBhdGhcIl0gIT0gXCJ1bmRlZmluZWRcIikgciArPSBkYXRhW1wicGF0aFwiXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRbXCJ1c2VlbXB0eWdldFwiXSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW1wiZ2V0XCJdICE9IFwidW5kZWZpbmVkXCIpIHIgKz0gXCI/XCIgKyBzZWxmW1wiYnVpbGRnZXRcIl0oZGF0YVtcImdldFwiXSk7ZWxzZSBpZiAodHlwZW9mIGRhdGFbXCJxdWVyeVwiXSAhPSBcInVuZGVmaW5lZFwiKSByICs9IFwiP1wiICsgZGF0YVtcInF1ZXJ5XCJdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgLmdldCB1c2UgaXQuICBJZiAuZ2V0IGxlYWRzIHRvIGVtcHR5LCB1c2UgLnF1ZXJ5LlxyXG4gICAgICAgICAgICAgICAgdmFyIHEgPSBkYXRhW1wiZ2V0XCJdICYmIHNlbGZbXCJidWlsZGdldFwiXShkYXRhW1wiZ2V0XCJdKSB8fCBkYXRhW1wicXVlcnlcIl07XHJcbiAgICAgICAgICAgICAgICBpZiAocSkgciArPSBcIj9cIiArIHE7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtcImhhc2hcIl0gIT0gXCJ1bmRlZmluZWRcIikgciArPSBcIiNcIiArIGRhdGFbXCJoYXNoXCJdO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHIgfHwgZGF0YVtcInVybFwiXSB8fCBcIlwiO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgIT0gXCJ1bmRlZmluZWRcIiAmJiBkZWZpbmVbXCJhbWRcIl0pIGRlZmluZShzZWxmKTtlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9IFwidW5kZWZpbmVkXCIpIG1vZHVsZVsnZXhwb3J0cyddID0gc2VsZjtlbHNlIHdpbmRvd1tcInVybFwiXSA9IHNlbGY7XHJcbn0oKTtcclxuXHJcbnZhciBkYXRlcGlja2VyID0gZnVuY3Rpb24gKGVsZW1lbnRJRCwgb3B0KSB7XHJcblxyXG4gICAgLy8gY2hlY2sgYXJndW1lbnRzXHJcbiAgICBpZiAodHlwZW9mIGVsZW1lbnRJRCAhPT0gXCJzdHJpbmdcIiB8fCBlbGVtZW50SUQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcImRhdGVwaWNrZXIgZXJyb3I6IGlucHV0IElEIGlzIG5vdCBzdHJpbmcgb3IgaXMgZW1wdHlcIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdmFyIG9wdGlvbnMgPSBvcHQgfHwge307XHJcblxyXG4gICAgLy8gdmFyaWFibGVzXHJcbiAgICB2YXIgaXNDYWxDbGlja2VkID0gZmFsc2U7XHJcbiAgICB2YXIgaXNTeW5jZWQgPSBmYWxzZTtcclxuXHJcbiAgICB2YXIgZGF5T2ZXZWVrO1xyXG5cclxuICAgIHZhciBzZWxlY3RlZFllYXI7XHJcbiAgICB2YXIgc2VsZWN0ZWRNb250aDtcclxuICAgIHZhciBzZWxlY3RlZERheTtcclxuXHJcbiAgICB2YXIgY3VycmVudFllYXI7XHJcbiAgICB2YXIgY3VycmVudE1vbnRoO1xyXG4gICAgdmFyIGN1cnJlbnREYXk7XHJcblxyXG4gICAgdmFyIHRvZGF5c1llYXI7XHJcbiAgICB2YXIgdG9kYXlzTW9udGg7XHJcbiAgICB2YXIgdG9kYXlzRGF5O1xyXG5cclxuICAgIHZhciBkYXlPZldlZWtKO1xyXG5cclxuICAgIHZhciBudW1iZXJPZkRheXM7XHJcblxyXG4gICAgdmFyIHRvZGF5RztcclxuICAgIHZhciB0b2RheXNKO1xyXG5cclxuICAgIC8vIGNvbnN0c1xyXG4gICAgdmFyIE1PTlRIX05BTUVTID0ge1xyXG4gICAgICAgIFwiMVwiOiBcItmB2LHZiNix2K/bjNmGXCIsXHJcbiAgICAgICAgXCIyXCI6IFwi2KfYsdiv24zYqNmH2LTYqlwiLFxyXG4gICAgICAgIFwiM1wiOiBcItiu2LHYr9in2K9cIixcclxuICAgICAgICBcIjRcIjogXCLYqtuM2LFcIixcclxuICAgICAgICBcIjVcIjogXCLZhdix2K/Yp9ivXCIsXHJcbiAgICAgICAgXCI2XCI6IFwi2LTZh9ix24zZiNixXCIsXHJcbiAgICAgICAgXCI3XCI6IFwi2YXZh9ixXCIsXHJcbiAgICAgICAgXCI4XCI6IFwi2KLYqNin2YZcIixcclxuICAgICAgICBcIjlcIjogXCLYotiw2LFcIixcclxuICAgICAgICBcIjEwXCI6IFwi2K/bjFwiLFxyXG4gICAgICAgIFwiMTFcIjogXCLYqNmH2YXZhlwiLFxyXG4gICAgICAgIFwiMTJcIjogXCLYp9iz2YHZhtivXCJcclxuICAgIH07XHJcbiAgICB2YXIgREFZX05BTUVTID0ge1xyXG4gICAgICAgIFwi2LTZhtio2YdcIjogXCLYtFwiLFxyXG4gICAgICAgIFwi24zaqdi02YbYqNmHXCI6IFwi24xcIixcclxuICAgICAgICBcItiv2YjYtNmG2KjZh1wiOiBcItivXCIsXHJcbiAgICAgICAgXCLYs9mHINi02YbYqNmHXCI6IFwi2LNcIixcclxuICAgICAgICBcItqG2YfYp9ix2LTZhtio2YdcIjogXCLahlwiLFxyXG4gICAgICAgIFwi2b7ZhtisINi02YbYqNmHXCI6IFwi2b5cIixcclxuICAgICAgICBcItis2YXYudmHXCI6IFwi2KxcIlxyXG4gICAgfTtcclxuICAgIHZhciBGQV9OVU1TID0gWyfZoCcsICfZoScsICfZoicsICfZoycsICfbtCcsICfbtScsICfbticsICfZpycsICfZqCcsICfZqScsICfZodmgJywgJ9mh2aEnLCAn2aHZoicsICfZodmjJywgJ9mh27QnLCAn2aHbtScsICfZodu2JywgJ9mh2acnLCAn2aHZqCcsICfZodmpJywgJ9mi2aAnLCAn2aLZoScsICfZotmiJywgJ9mi2aMnLCAn2aLbtCcsICfZotu1JywgJ9mi27YnLCAn2aLZpycsICfZotmoJywgJ9mi2aknLCAn2aPZoCcsICfZo9mhJywgJ9mj2aInXTtcclxuXHJcbiAgICAvLyBzZXQgb3B0aW9uc1xyXG4gICAgb3B0aW9ucy5wbGFjZWhvbGRlciA9IG9wdGlvbnMucGxhY2Vob2xkZXIgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMucGxhY2Vob2xkZXIgOiBcIlwiO1xyXG4gICAgb3B0aW9ucy50d29kaWdpdCA9IG9wdGlvbnMudHdvZGlnaXQgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMudHdvZGlnaXQgOiB0cnVlO1xyXG4gICAgb3B0aW9ucy5jbG9zZUFmdGVyU2VsZWN0ID0gb3B0aW9ucy5jbG9zZUFmdGVyU2VsZWN0ICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmNsb3NlQWZ0ZXJTZWxlY3QgOiB0cnVlO1xyXG4gICAgb3B0aW9ucy5uZXh0QnV0dG9uSWNvbiA9IG9wdGlvbnMubmV4dEJ1dHRvbkljb24gIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubmV4dEJ1dHRvbkljb24gOiBmYWxzZTtcclxuICAgIG9wdGlvbnMucHJldmlvdXNCdXR0b25JY29uID0gb3B0aW9ucy5wcmV2aW91c0J1dHRvbkljb24gIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMucHJldmlvdXNCdXR0b25JY29uIDogZmFsc2U7XHJcbiAgICBvcHRpb25zLmJ1dHRvbnNDb2xvciA9IG9wdGlvbnMuYnV0dG9uc0NvbG9yICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmJ1dHRvbnNDb2xvciA6IGZhbHNlO1xyXG4gICAgb3B0aW9ucy5mb3JjZUZhcnNpRGlnaXRzID0gb3B0aW9ucy5mb3JjZUZhcnNpRGlnaXRzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmZvcmNlRmFyc2lEaWdpdHMgOiBmYWxzZTtcclxuICAgIG9wdGlvbnMubWFya1RvZGF5ID0gb3B0aW9ucy5tYXJrVG9kYXkgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubWFya1RvZGF5IDogZmFsc2U7XHJcbiAgICBvcHRpb25zLm1hcmtIb2xpZGF5cyA9IG9wdGlvbnMubWFya0hvbGlkYXlzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm1hcmtIb2xpZGF5cyA6IGZhbHNlO1xyXG4gICAgb3B0aW9ucy5oaWdobGlnaHRTZWxlY3RlZERheSA9IG9wdGlvbnMuaGlnaGxpZ2h0U2VsZWN0ZWREYXkgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuaGlnaGxpZ2h0U2VsZWN0ZWREYXkgOiBmYWxzZTtcclxuICAgIG9wdGlvbnMuc3luYyA9IG9wdGlvbnMuc3luYyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5zeW5jIDogZmFsc2U7XHJcbiAgICBvcHRpb25zLmdvdG9Ub2RheSA9IG9wdGlvbnMuZ290b1RvZGF5ICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmdvdG9Ub2RheSA6IGZhbHNlO1xyXG5cclxuICAgIC8vIGNyZWF0ZSBET01cclxuICAgIHZhciBpbnB1dEVsZW1lbnQgPSAkKFwiI1wiICsgZWxlbWVudElEKTtcclxuXHJcbiAgICBpZiAoaW5wdXRFbGVtZW50LmF0dHIoXCJwbGFjZWhvbGRlclwiKSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaW5wdXRFbGVtZW50LmF0dHIoXCJwbGFjZWhvbGRlclwiLCBvcHRpb25zLnBsYWNlaG9sZGVyKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjcmVhdGUgcGFyZW50IGRpdlxyXG4gICAgaW5wdXRFbGVtZW50LndyYXAoXCI8ZGl2IGlkPSdiZC1yb290LVwiICsgZWxlbWVudElEICsgXCInIHN0eWxlPSdwb3NpdGlvbjogcmVsYXRpdmU7Jz48L2Rpdj5cIik7XHJcblxyXG4gICAgLy8gY3JlYXRlIG1haW4gZGl2IGZvciBjYWxlbmRhciwgYmVsb3cgaW5wdXQgZWxlbWVudFxyXG4gICAgaW5wdXRFbGVtZW50LmFmdGVyKFwiPGRpdiBpZD0nYmQtbWFpbi1cIiArIGVsZW1lbnRJRCArIFwiJyBjbGFzcz0nYmQtbWFpbiBiZC1oaWRlJyBzdHlsZT0ncG9zaXRpb246IGFic29sdXRlOyBkaXJlY3Rpb246IHJ0bDsnPjwvZGl2PlwiKTtcclxuICAgIHZhciBtYWluRGl2ID0gJChcIiNiZC1tYWluLVwiICsgZWxlbWVudElEKTtcclxuXHJcbiAgICAvLyBjcmVhdGUgY2FsZW5kYXIgZGl2IGluc2lkZSBtYWluIGRpdlxyXG4gICAgbWFpbkRpdi5hcHBlbmQoXCI8ZGl2IGNsYXNzPSdiZC1jYWxlbmRhcic+PC9kaXY+XCIpO1xyXG4gICAgdmFyIGNhbGVuZGFyRGl2ID0gbWFpbkRpdi5maW5kKCcuYmQtY2FsZW5kYXInKTtcclxuXHJcbiAgICAvLyBjcmVhdGUgdGl0bGUgZGl2IGFuZCB0YWJsZSBpbnNpZGUgY2FsZW5kYXIgZGl2XHJcbiAgICBjYWxlbmRhckRpdi5hcHBlbmQoXCI8ZGl2IGNsYXNzPSdiZC10aXRsZSc+PC9kaXY+XCIpO1xyXG4gICAgdmFyIHRpdGxlRGl2ID0gY2FsZW5kYXJEaXYuZmluZCgnLmJkLXRpdGxlJyk7XHJcbiAgICBjYWxlbmRhckRpdi5hcHBlbmQoXCI8dGFibGUgY2xhc3M9J2JkLXRhYmxlJyBkaXI9J3J0bCcgY2VsbHNwYWNpbmc9JzAnIGNlbGxwYWRkaW5nPScwJz48L3RhYmxlPlwiKTtcclxuXHJcbiAgICAvLyBjcmVhdGUgbW9udGggYW5kIHllYXIgZHJvcCBkb3ducyBhbmQgbmV4dC9wcmV2IG1vbnRoIGJ1dHRvbnMgaW5zaWRlIHRpdGxlIGRpdlxyXG4gICAgdGl0bGVEaXYuYXBwZW5kKFwiPGJ1dHRvbiBpZD0nYmQtbmV4dC1cIiArIGVsZW1lbnRJRCArIFwiJyBjbGFzcz0nYmQtbmV4dCcgdHlwZT0nYnV0dG9uJyB0aXRsZT0n2YXYp9mHINio2LnYr9uMJyBkYXRhLXRvZ2dsZT0ndG9vbHRpcCc+PHNwYW4+2KjYudiv24w8L3NwYW4+PC9idXR0b24+XCIpO1xyXG4gICAgdmFyIG5leHRNb250aCA9ICQoXCIjYmQtbmV4dC1cIiArIGVsZW1lbnRJRCk7XHJcbiAgICBpZiAob3B0aW9ucy5uZXh0QnV0dG9uSWNvbikge1xyXG4gICAgICAgIG5leHRNb250aC5maW5kKFwic3BhblwiKS5jc3MoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgICAgICBpZiAob3B0aW9ucy5uZXh0QnV0dG9uSWNvbi5pbmRleE9mKFwiLlwiKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgLy8gaW1hZ2VcclxuICAgICAgICAgICAgbmV4dE1vbnRoLmNzcyhcImJhY2tncm91bmQtaW1hZ2VcIiwgXCJ1cmwoXCIgKyBvcHRpb25zLm5leHRCdXR0b25JY29uICsgXCIpXCIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGNzcyBjbGFzc1xyXG4gICAgICAgICAgICBuZXh0TW9udGguYWRkQ2xhc3Mob3B0aW9ucy5uZXh0QnV0dG9uSWNvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRpdGxlRGl2LmFwcGVuZChcIjxkaXYgY2xhc3M9J2JkLWRyb3Bkb3duJz48L2Rpdj48ZGl2IGNsYXNzPSdiZC1kcm9wZG93bic+PC9kaXY+XCIpO1xyXG5cclxuICAgIHRpdGxlRGl2LmZpbmQoJy5iZC1kcm9wZG93bjpudGgtY2hpbGQoMiknKS5hcHBlbmQoXCI8c2VsZWN0IGlkPSdiZC1tb250aC1cIiArIGVsZW1lbnRJRCArIFwiJyBjbGFzcz0nYmQtbW9udGgnPjwvc2VsZWN0PlwiKTtcclxuICAgIHZhciBtb250aERyb3Bkb3duID0gJChcIiNiZC1tb250aC1cIiArIGVsZW1lbnRJRCk7XHJcbiAgICAkLmVhY2goTU9OVEhfTkFNRVMsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgbW9udGhEcm9wZG93bi5hcHBlbmQoJChcIjxvcHRpb24+PC9vcHRpb24+XCIpLmF0dHIoXCJ2YWx1ZVwiLCBrZXkpLnRleHQodmFsdWUpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRpdGxlRGl2LmZpbmQoJy5iZC1kcm9wZG93bjpudGgtY2hpbGQoMyknKS5hcHBlbmQoXCI8c2VsZWN0IGlkPSdiZC15ZWFyLVwiICsgZWxlbWVudElEICsgXCInIGNsYXNzPSdiZC15ZWFyJz48L3NlbGVjdD5cIik7XHJcbiAgICB2YXIgeWVhckRyb3Bkb3duID0gJChcIiNiZC15ZWFyLVwiICsgZWxlbWVudElEKTtcclxuXHJcbiAgICB0aXRsZURpdi5hcHBlbmQoXCI8YnV0dG9uIGlkPSdiZC1wcmV2LVwiICsgZWxlbWVudElEICsgXCInIGNsYXNzPSdiZC1wcmV2JyB0eXBlPSdidXR0b24nIHRpdGxlPSfZhdin2Ycg2YLYqNmE24wnIGRhdGEtdG9nZ2xlPSd0b29sdGlwJz48c3Bhbj7Zgtio2YTbjDwvc3Bhbj48L2J1dHRvbj5cIik7XHJcbiAgICB2YXIgcHJldk1vbnRoID0gJChcIiNiZC1wcmV2LVwiICsgZWxlbWVudElEKTtcclxuICAgIGlmIChvcHRpb25zLm5leHRCdXR0b25JY29uKSB7XHJcbiAgICAgICAgcHJldk1vbnRoLmZpbmQoXCJzcGFuXCIpLmNzcyhcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG4gICAgICAgIGlmIChvcHRpb25zLnByZXZpb3VzQnV0dG9uSWNvbi5pbmRleE9mKFwiLlwiKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgLy8gaW1hZ2VcclxuICAgICAgICAgICAgcHJldk1vbnRoLmNzcyhcImJhY2tncm91bmQtaW1hZ2VcIiwgXCJ1cmwoXCIgKyBvcHRpb25zLnByZXZpb3VzQnV0dG9uSWNvbiArIFwiKVwiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBjc3MgY2xhc3NcclxuICAgICAgICAgICAgcHJldk1vbnRoLmFkZENsYXNzKG9wdGlvbnMucHJldmlvdXNCdXR0b25JY29uKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9wdGlvbnMuYnV0dG9uc0NvbG9yKSB7XHJcbiAgICAgICAgbmV4dE1vbnRoLmNzcyhcImNvbG9yXCIsIG9wdGlvbnMuYnV0dG9uc0NvbG9yKTtcclxuICAgICAgICBuZXh0TW9udGguZmluZChcInNwYW5cIikuY3NzKFwiY29sb3JcIiwgb3B0aW9ucy5idXR0b25zQ29sb3IpO1xyXG4gICAgICAgIHByZXZNb250aC5jc3MoXCJjb2xvclwiLCBvcHRpb25zLmJ1dHRvbnNDb2xvcik7XHJcbiAgICAgICAgcHJldk1vbnRoLmZpbmQoXCJzcGFuXCIpLmNzcyhcImNvbG9yXCIsIG9wdGlvbnMuYnV0dG9uc0NvbG9yKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjcmVhdGUgdGFibGUgaGVhZGVyIGFuZCBib2R5XHJcbiAgICBjYWxlbmRhckRpdi5maW5kKCcuYmQtdGFibGUnKS5hcHBlbmQoXCI8dGhlYWQ+PHRyPjwvdHI+PC90aGVhZD5cIik7XHJcbiAgICAkLmVhY2goREFZX05BTUVTLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIGNhbGVuZGFyRGl2LmZpbmQoJy5iZC10YWJsZSB0aGVhZCB0cicpLmFwcGVuZCgkKFwiPHRoPjwvdGg+XCIpLnRleHQodmFsdWUpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNhbGVuZGFyRGl2LmZpbmQoJy5iZC10YWJsZScpLmFwcGVuZChcIjx0Ym9keSBpZD0nYmQtdGFibGUtZGF5cy1cIiArIGVsZW1lbnRJRCArIFwiJyBjbGFzcz0nYmQtdGFibGUtZGF5cyc+PC90Ym9keT5cIik7XHJcbiAgICB2YXIgZGF5c1RhYmxlID0gJChcIiNiZC10YWJsZS1kYXlzLVwiICsgZWxlbWVudElEKTtcclxuXHJcbiAgICAvLyBjcmVhdGUgZ28gdG8gdG9kYXlzIGJ1dHRvblxyXG4gICAgaWYgKG9wdGlvbnMuZ290b1RvZGF5KSB7XHJcbiAgICAgICAgY2FsZW5kYXJEaXYuYXBwZW5kKFwiPGRpdiBjbGFzcz0nYmQtZ290by10b2RheSc+2KjYsdmIINio2Ycg2KfZhdix2YjYsjwvZGl2PlwiKTtcclxuICAgICAgICB2YXIgZ290b1RvZGF5ID0gY2FsZW5kYXJEaXYuZmluZChcIi5iZC1nb3RvLXRvZGF5XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIG9wZW5pbmcgYW5kIGNsb3NpbmcgZnVuY3Rpb25hbGl0eVxyXG4gICAgaW5wdXRFbGVtZW50Lm9uKFwiZm9jdXNcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIG1haW5EaXYucmVtb3ZlQ2xhc3MoXCJiZC1oaWRlXCIpO1xyXG4gICAgICAgIGlmIChvcHRpb25zLnN5bmMgJiYgaXNTeW5jZWQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHN5bmNDYWxlbmRhcigpO1xyXG4gICAgICAgICAgICBpc1N5bmNlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1haW5EaXY7XHJcbiAgICB9KS5vbignYmx1cicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoaXNDYWxDbGlja2VkID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIG1haW5EaXYuYWRkQ2xhc3MoXCJiZC1oaWRlXCIpO1xyXG4gICAgICAgICAgICBpc1N5bmNlZCA9IGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlzQ2FsQ2xpY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpbnB1dEVsZW1lbnQuZm9jdXMoKTtcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBtYWluRGl2Lm9uKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICBpc0NhbENsaWNrZWQgPSB0cnVlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gZHJvcGRvd24gZXZlbnRzXHJcbiAgICBtb250aERyb3Bkb3duLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc2VsZWN0ZWRNb250aCA9IHBhcnNlSW50KHRoaXMudmFsdWUpO1xyXG4gICAgICAgIG51bWJlck9mRGF5cyA9IG1vbnRoRGF5cyhzZWxlY3RlZFllYXIsIHNlbGVjdGVkTW9udGgpO1xyXG4gICAgICAgIGRheU9mV2Vla0ogPSBmaW5kRmlyc3REYXlPZk1vbnRoKHNlbGVjdGVkWWVhciwgc2VsZWN0ZWRNb250aCk7XHJcbiAgICAgICAgZHJhd0RheXMobnVtYmVyT2ZEYXlzLCBkYXlPZldlZWtKKTtcclxuICAgIH0pO1xyXG4gICAgeWVhckRyb3Bkb3duLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc2VsZWN0ZWRZZWFyID0gcGFyc2VJbnQodGhpcy52YWx1ZSk7XHJcbiAgICAgICAgbnVtYmVyT2ZEYXlzID0gbW9udGhEYXlzKHNlbGVjdGVkWWVhciwgc2VsZWN0ZWRNb250aCk7XHJcbiAgICAgICAgZGF5T2ZXZWVrSiA9IGZpbmRGaXJzdERheU9mTW9udGgoc2VsZWN0ZWRZZWFyLCBzZWxlY3RlZE1vbnRoKTtcclxuICAgICAgICBkcmF3RGF5cyhudW1iZXJPZkRheXMsIGRheU9mV2Vla0opO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gR2VvcmdpYW4gdG8gSmFsYWxpIGNvbnZlcnRlciAobWluaWZpZWQpXHJcbiAgICAvLyBzb3VyY2UgaXMgdW5rbm93bi4gY29udGFjdCBpZiB5b3Uga25vdyB0aGUgY29kZSBvd25lci5cclxuICAgIGZ1bmN0aW9uIGdyZWdvcmlhblRvSmFsYWxpKGEsIHIsIHMpIHtcclxuICAgICAgICBhID0gcGFyc2VJbnQoYSksIHIgPSBwYXJzZUludChyKSwgcyA9IHBhcnNlSW50KHMpO2ZvciAodmFyIG4gPSBhIC0gMTYwMCwgZSA9IHIgLSAxLCB0ID0gcyAtIDEsIHAgPSAzNjUgKiBuICsgcGFyc2VJbnQoKG4gKyAzKSAvIDQpIC0gcGFyc2VJbnQoKG4gKyA5OSkgLyAxMDApICsgcGFyc2VJbnQoKG4gKyAzOTkpIC8gNDAwKSwgSSA9IDA7IGUgPiBJOyArK0kpIHAgKz0gZ19kYXlzW0ldO2UgPiAxICYmIChuICUgNCA9PSAwICYmIG4gJSAxMDAgIT0gMCB8fCBuICUgNDAwID09IDApICYmICsrcCwgcCArPSB0O3ZhciB2ID0gcCAtIDc5LFxyXG4gICAgICAgICAgICBkID0gcGFyc2VJbnQodiAvIDEyMDUzKTt2ICU9IDEyMDUzO3ZhciBvID0gOTc5ICsgMzMgKiBkICsgNCAqIHBhcnNlSW50KHYgLyAxNDYxKTt2ICU9IDE0NjEsIHYgPj0gMzY2ICYmIChvICs9IHBhcnNlSW50KCh2IC0gMSkgLyAzNjUpLCB2ID0gKHYgLSAxKSAlIDM2NSk7Zm9yICh2YXIgSSA9IDA7IDExID4gSSAmJiB2ID49IGpfZGF5c1tJXTsgKytJKSB2IC09IGpfZGF5c1tJXTt2YXIgeSA9IEkgKyAxLFxyXG4gICAgICAgICAgICBfID0gdiArIDE7cmV0dXJuIFtvLCB5LCBfXTtcclxuICAgIH12YXIgZ19kYXlzID0gWzMxLCAyOCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdLFxyXG4gICAgICAgIGpfZGF5cyA9IFszMSwgMzEsIDMxLCAzMSwgMzEsIDMxLCAzMCwgMzAsIDMwLCAzMCwgMzAsIDI5XTtcclxuICAgIC8vIEphbGFsaSB0byBHZW9yZ2lhbiBjb252ZXJ0ZXIgKG1pbmlmaWVkKVxyXG4gICAgLy8gc291cmNlIGlzIHVua25vd24uIGNvbnRhY3QgaWYgeW91IGtub3cgdGhlIGNvZGUgb3duZXIuXHJcbiAgICBmdW5jdGlvbiB0b0phbGFhbGkoZCwgaSwgYSkge1xyXG4gICAgICAgIHJldHVybiBkMmooZzJkKGQsIGksIGEpKTtcclxuICAgIH1mdW5jdGlvbiB0b0dyZWdvcmlhbihkLCBpLCBhKSB7XHJcbiAgICAgICAgcmV0dXJuIGQyZyhqMmQoZCwgaSwgYSkpO1xyXG4gICAgfWZ1bmN0aW9uIGlzVmFsaWRKYWxhYWxpRGF0ZShkLCBpLCBhKSB7XHJcbiAgICAgICAgcmV0dXJuIGQgPj0gLTYxICYmIDMxNzcgPj0gZCAmJiBpID49IDEgJiYgMTIgPj0gaSAmJiBhID49IDEgJiYgYSA8PSBqYWxhYWxpTW9udGhMZW5ndGgoZCwgaSk7XHJcbiAgICB9ZnVuY3Rpb24gaXNMZWFwSmFsYWFsaVllYXIoZCkge1xyXG4gICAgICAgIHJldHVybiAwID09PSBqYWxDYWwoZCkubGVhcDtcclxuICAgIH1mdW5jdGlvbiBqYWxhYWxpTW9udGhMZW5ndGgoZCwgaSkge1xyXG4gICAgICAgIHJldHVybiA2ID49IGkgPyAzMSA6IDExID49IGkgPyAzMCA6IGlzTGVhcEphbGFhbGlZZWFyKGQpID8gMzAgOiAyOTtcclxuICAgIH1mdW5jdGlvbiBqYWxDYWwoZCkge1xyXG4gICAgICAgIHZhciBpLFxyXG4gICAgICAgICAgICBhLFxyXG4gICAgICAgICAgICBuLFxyXG4gICAgICAgICAgICByLFxyXG4gICAgICAgICAgICB0LFxyXG4gICAgICAgICAgICBvLFxyXG4gICAgICAgICAgICB2LFxyXG4gICAgICAgICAgICBlID0gWy02MSwgOSwgMzgsIDE5OSwgNDI2LCA2ODYsIDc1NiwgODE4LCAxMTExLCAxMTgxLCAxMjEwLCAxNjM1LCAyMDYwLCAyMDk3LCAyMTkyLCAyMjYyLCAyMzI0LCAyMzk0LCAyNDU2LCAzMTc4XSxcclxuICAgICAgICAgICAgbCA9IGUubGVuZ3RoLFxyXG4gICAgICAgICAgICB1ID0gZCArIDYyMSxcclxuICAgICAgICAgICAgbSA9IC0xNCxcclxuICAgICAgICAgICAgZyA9IGVbMF07aWYgKGcgPiBkIHx8IGQgPj0gZVtsIC0gMV0pIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgSmFsYWFsaSB5ZWFyIFwiICsgZCk7Zm9yICh2ID0gMTsgbCA+IHYgJiYgKGkgPSBlW3ZdLCBhID0gaSAtIGcsICEoaSA+IGQpKTsgdiArPSAxKSBtID0gbSArIDggKiBkaXYoYSwgMzMpICsgZGl2KG1vZChhLCAzMyksIDQpLCBnID0gaTtyZXR1cm4gbyA9IGQgLSBnLCBtID0gbSArIDggKiBkaXYobywgMzMpICsgZGl2KG1vZChvLCAzMykgKyAzLCA0KSwgNCA9PT0gbW9kKGEsIDMzKSAmJiBhIC0gbyA9PT0gNCAmJiAobSArPSAxKSwgciA9IGRpdih1LCA0KSAtIGRpdigzICogKGRpdih1LCAxMDApICsgMSksIDQpIC0gMTUwLCB0ID0gMjAgKyBtIC0gciwgNiA+IGEgLSBvICYmIChvID0gbyAtIGEgKyAzMyAqIGRpdihhICsgNCwgMzMpKSwgbiA9IG1vZChtb2QobyArIDEsIDMzKSAtIDEsIDQpLCAtMSA9PT0gbiAmJiAobiA9IDQpLCB7IGxlYXA6IG4sIGd5OiB1LCBtYXJjaDogdCB9O1xyXG4gICAgfWZ1bmN0aW9uIGoyZChkLCBpLCBhKSB7XHJcbiAgICAgICAgdmFyIG4gPSBqYWxDYWwoZCk7cmV0dXJuIGcyZChuLmd5LCAzLCBuLm1hcmNoKSArIDMxICogKGkgLSAxKSAtIGRpdihpLCA3KSAqIChpIC0gNykgKyBhIC0gMTtcclxuICAgIH1mdW5jdGlvbiBkMmooZCkge1xyXG4gICAgICAgIHZhciBpLFxyXG4gICAgICAgICAgICBhLFxyXG4gICAgICAgICAgICBuLFxyXG4gICAgICAgICAgICByID0gZDJnKGQpLmd5LFxyXG4gICAgICAgICAgICB0ID0gciAtIDYyMSxcclxuICAgICAgICAgICAgbyA9IGphbENhbCh0KSxcclxuICAgICAgICAgICAgdiA9IGcyZChyLCAzLCBvLm1hcmNoKTtpZiAobiA9IGQgLSB2LCBuID49IDApIHtcclxuICAgICAgICAgICAgaWYgKDE4NSA+PSBuKSByZXR1cm4gYSA9IDEgKyBkaXYobiwgMzEpLCBpID0gbW9kKG4sIDMxKSArIDEsIHsgank6IHQsIGptOiBhLCBqZDogaSB9O24gLT0gMTg2O1xyXG4gICAgICAgIH0gZWxzZSB0IC09IDEsIG4gKz0gMTc5LCAxID09PSBvLmxlYXAgJiYgKG4gKz0gMSk7cmV0dXJuIGEgPSA3ICsgZGl2KG4sIDMwKSwgaSA9IG1vZChuLCAzMCkgKyAxLCB7IGp5OiB0LCBqbTogYSwgamQ6IGkgfTtcclxuICAgIH1mdW5jdGlvbiBnMmQoZCwgaSwgYSkge1xyXG4gICAgICAgIHZhciBuID0gZGl2KDE0NjEgKiAoZCArIGRpdihpIC0gOCwgNikgKyAxMDAxMDApLCA0KSArIGRpdigxNTMgKiBtb2QoaSArIDksIDEyKSArIDIsIDUpICsgYSAtIDM0ODQwNDA4O3JldHVybiBuID0gbiAtIGRpdigzICogZGl2KGQgKyAxMDAxMDAgKyBkaXYoaSAtIDgsIDYpLCAxMDApLCA0KSArIDc1MjtcclxuICAgIH1mdW5jdGlvbiBkMmcoZCkge1xyXG4gICAgICAgIHZhciBpLCBhLCBuLCByLCB0O3JldHVybiBpID0gNCAqIGQgKyAxMzkzNjE2MzEsIGkgPSBpICsgNCAqIGRpdigzICogZGl2KDQgKiBkICsgMTgzMTg3NzIwLCAxNDYwOTcpLCA0KSAtIDM5MDgsIGEgPSA1ICogZGl2KG1vZChpLCAxNDYxKSwgNCkgKyAzMDgsIG4gPSBkaXYobW9kKGEsIDE1MyksIDUpICsgMSwgciA9IG1vZChkaXYoYSwgMTUzKSwgMTIpICsgMSwgdCA9IGRpdihpLCAxNDYxKSAtIDEwMDEwMCArIGRpdig4IC0gciwgNiksIHsgZ3k6IHQsIGdtOiByLCBnZDogbiB9O1xyXG4gICAgfWZ1bmN0aW9uIGRpdihkLCBpKSB7XHJcbiAgICAgICAgcmV0dXJuIH5+KGQgLyBpKTtcclxuICAgIH1mdW5jdGlvbiBtb2QoZCwgaSkge1xyXG4gICAgICAgIHJldHVybiBkIC0gfn4oZCAvIGkpICogaTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgc3luY0NhbGVuZGFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpbnB1dFZhbHVlID0gZml4RGF0ZShpbnB1dEVsZW1lbnQudmFsKCkpO1xyXG4gICAgICAgIGlmIChpbnB1dFZhbHVlID09PSBcIlwiKSByZXR1cm47XHJcblxyXG4gICAgICAgIGlucHV0VmFsdWUgPSBpbnB1dFZhbHVlLnNwbGl0KFwiL1wiKTtcclxuICAgICAgICBtb250aERyb3Bkb3duLnZhbChwYXJzZUludChpbnB1dFZhbHVlWzFdKSk7XHJcbiAgICAgICAgbW9udGhEcm9wZG93bi50cmlnZ2VyKFwiY2hhbmdlXCIpO1xyXG4gICAgICAgIHllYXJEcm9wZG93bi52YWwocGFyc2VJbnQoaW5wdXRWYWx1ZVswXSkpO1xyXG4gICAgICAgIHllYXJEcm9wZG93bi50cmlnZ2VyKFwiY2hhbmdlXCIpO1xyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5oaWdobGlnaHRTZWxlY3RlZERheSkge1xyXG4gICAgICAgICAgICBtYWluRGl2LmZpbmQoXCIuYmQtc2VsZWN0ZWQtZGF5XCIpLnJlbW92ZUNsYXNzKFwiYmQtc2VsZWN0ZWQtZGF5XCIpO1xyXG4gICAgICAgICAgICBtYWluRGl2LmZpbmQoXCIuZGF5LVwiICsgcGFyc2VJbnQoaW5wdXRWYWx1ZVsyXSkpLmFkZENsYXNzKFwiYmQtc2VsZWN0ZWQtZGF5XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdmFyIGZpeERhdGUgPSBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgIGlmIChkYXRlID09PSBcIlwiKSByZXR1cm4gXCJcIjtcclxuXHJcbiAgICAgICAgZGF0ZSA9IGRhdGUuc3BsaXQoXCIvXCIpO1xyXG4gICAgICAgIC8vIGlmIChkYXRlWzBdLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgIC8vICAgICBkYXRlWzBdID0gXCIxM1wiICsgZGF0ZVswXTtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgaWYgKGRhdGVbMV0ubGVuZ3RoIDwgMikge1xyXG4gICAgICAgICAgICBpZiAoZGF0ZVsxXSA8IDEwKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRlWzFdID0gXCIwXCIgKyBkYXRlWzFdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkYXRlWzJdLmxlbmd0aCA8IDIpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGVbMl0gPCAxMCkge1xyXG4gICAgICAgICAgICAgICAgZGF0ZVsyXSA9IFwiMFwiICsgZGF0ZVsyXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBkYXRlID0gZGF0ZS5qb2luKFwiL1wiKTtcclxuICAgICAgICByZXR1cm4gZGF0ZTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGNvbnZlcnRUb0pXZWVrID0gZnVuY3Rpb24gKGRheU9mV2Vla0cpIHtcclxuICAgICAgICB2YXIgZGF5T2ZXZWVrSjtcclxuICAgICAgICBpZiAoZGF5T2ZXZWVrRyA8IDYpIHtcclxuICAgICAgICAgICAgZGF5T2ZXZWVrSiA9IGRheU9mV2Vla0cgKyAxO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGRheU9mV2Vla0ogPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGF5T2ZXZWVrSjtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIG1ha2VZZWFyTGlzdCA9IGZ1bmN0aW9uICh0aGlzWWVhcikge1xyXG4gICAgICAgIHllYXJEcm9wZG93bi5maW5kKCdvcHRpb24nKS5yZW1vdmUoKTtcclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTAxOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIHRlbXBZZWFyID0gdGhpc1llYXIgLSA5NSArIGkgKyAnJztcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZm9yY2VGYXJzaURpZ2l0cykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCAxMDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJneCA9IG5ldyBSZWdFeHAoaiwgJ2cnKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wWWVhciA9IHRlbXBZZWFyLnJlcGxhY2Uocmd4LCBGQV9OVU1TW2pdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB5ZWFyRHJvcGRvd24uYXBwZW5kKCQoJzxvcHRpb24+Jywge1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXNZZWFyIC0gOTUgKyBpLFxyXG4gICAgICAgICAgICAgICAgdGV4dDogdGVtcFllYXJcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gaXNsZWFwIGNhbGN1bGF0b3IsIHN1cHBvcnRlZCB5ZWFyOiAxMjQzIC0gMTQ3M1xyXG4gICAgdmFyIGlzTGVhcFllYXIgPSBmdW5jdGlvbiAoeWVhcikge1xyXG4gICAgICAgIHZhciBtb2Q7XHJcbiAgICAgICAgaWYgKHllYXIgPCAxMzQzICYmIHllYXIgPiAxMjQzKSB7XHJcbiAgICAgICAgICAgIG1vZCA9IHllYXIgJSAzMztcclxuICAgICAgICAgICAgaWYgKG1vZCA9PSAxIHx8IG1vZCA9PSA1IHx8IG1vZCA9PSA5IHx8IG1vZCA9PSAxMyB8fCBtb2QgPT0gMTcgfHwgbW9kID09IDIyIHx8IG1vZCA9PSAyNiB8fCBtb2QgPT0gMzApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICh5ZWFyIDwgMTQ3MyAmJiB5ZWFyID4gMTM0Mikge1xyXG4gICAgICAgICAgICBtb2QgPSB5ZWFyICUgMTc7XHJcbiAgICAgICAgICAgIGlmIChtb2QgPT0gMSB8fCBtb2QgPT0gNSB8fCBtb2QgPT0gOSB8fCBtb2QgPT0gMTMgfHwgbW9kID09IDE4IHx8IG1vZCA9PSAyMiB8fCBtb2QgPT0gMjYgfHwgbW9kID09IDMwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcInVua25vd25cIjtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBtb250aERheXMgPSBmdW5jdGlvbiAoeWVhciwgbW9udGgpIHtcclxuICAgICAgICBpZiAobW9udGggPCA3KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAzMTtcclxuICAgICAgICB9IGVsc2UgaWYgKG1vbnRoIDwgMTIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDMwO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChpc0xlYXBZZWFyKHllYXIpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMzA7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMjk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIG1ha2UgZmlyc3QgcGFnZSBvZiBjYWxlbmRhclxyXG4gICAgdG9kYXlHID0gbmV3IERhdGUoKTtcclxuXHJcbiAgICB0b2RheXNKID0gZ3JlZ29yaWFuVG9KYWxhbGkodG9kYXlHLmdldEZ1bGxZZWFyKCksIHRvZGF5Ry5nZXRNb250aCgpICsgMSwgdG9kYXlHLmdldERhdGUoKSk7XHJcbiAgICB2YXIgc2VsZWN0ZWREYXRlSiA9IFtdO1xyXG4gICAgZm9yIChpID0gMDsgaSA8IDM7IGkrKykge1xyXG4gICAgICAgIHNlbGVjdGVkRGF0ZUpbaV0gPSB0b2RheXNKW2ldO1xyXG4gICAgfVxyXG5cclxuICAgIHRvZGF5c1llYXIgPSB0b2RheXNKWzBdO1xyXG4gICAgdG9kYXlzTW9udGggPSB0b2RheXNKWzFdO1xyXG4gICAgdG9kYXlzRGF5ID0gdG9kYXlzSlsyXTtcclxuXHJcbiAgICBzZWxlY3RlZFllYXIgPSBzZWxlY3RlZERhdGVKWzBdO1xyXG4gICAgc2VsZWN0ZWRNb250aCA9IHNlbGVjdGVkRGF0ZUpbMV07XHJcbiAgICBzZWxlY3RlZERheSA9IHNlbGVjdGVkRGF0ZUpbMl07XHJcblxyXG4gICAgbW9udGhEcm9wZG93bi52YWwoc2VsZWN0ZWRNb250aCk7XHJcbiAgICBtYWtlWWVhckxpc3Qoc2VsZWN0ZWRZZWFyKTtcclxuICAgIHllYXJEcm9wZG93bi52YWwoc2VsZWN0ZWRZZWFyKTtcclxuXHJcbiAgICBudW1iZXJPZkRheXMgPSBtb250aERheXMoc2VsZWN0ZWRZZWFyLCBzZWxlY3RlZE1vbnRoKTtcclxuXHJcbiAgICAvLyBmaW5kIGZpcnN0IGRheSBvZiBtb250aCBpbiB3ZWVrXHJcbiAgICB2YXIgZmluZEZpcnN0RGF5T2ZNb250aCA9IGZ1bmN0aW9uIChzZWxlY3RlZFllYXIsIHNlbGVjdGVkTW9udGgpIHtcclxuICAgICAgICB2YXIgZmlyc3REYXlPZk1vbnRoRyA9IHRvR3JlZ29yaWFuKHNlbGVjdGVkWWVhciwgc2VsZWN0ZWRNb250aCwgMSk7XHJcbiAgICAgICAgZmlyc3REYXlPZk1vbnRoRyA9IG5ldyBEYXRlKGZpcnN0RGF5T2ZNb250aEcuZ3kgKyBcIi9cIiArIGZpcnN0RGF5T2ZNb250aEcuZ20gKyBcIi9cIiArIGZpcnN0RGF5T2ZNb250aEcuZ2QpO1xyXG4gICAgICAgIHJldHVybiBjb252ZXJ0VG9KV2VlayhmaXJzdERheU9mTW9udGhHLmdldERheSgpKTtcclxuICAgIH07XHJcbiAgICBkYXlPZldlZWtKID0gZmluZEZpcnN0RGF5T2ZNb250aChzZWxlY3RlZFllYXIsIHNlbGVjdGVkTW9udGgpO1xyXG5cclxuICAgIC8vIGRyYXcgZGF5cyBvbiBjYWxlbmRhclxyXG4gICAgdmFyIGRyYXdEYXlzID0gZnVuY3Rpb24gKG51bWJlck9mRGF5cywgZGF5T2ZXZWVrSikge1xyXG4gICAgICAgIGRheXNUYWJsZS5lbXB0eSgpO1xyXG4gICAgICAgIHZhciBkYXlJbmRleCA9IDE7XHJcbiAgICAgICAgdmFyIHJvd0luZGV4ID0gMTtcclxuICAgICAgICB3aGlsZSAoZGF5SW5kZXggPD0gbnVtYmVyT2ZEYXlzKSB7XHJcbiAgICAgICAgICAgIGRheXNUYWJsZS5hcHBlbmQoJCgnPHRyPicsIHtcclxuICAgICAgICAgICAgICAgIGNsYXNzOiBcInRyLVwiICsgcm93SW5kZXhcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF5SW5kZXggPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBqID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaiA8IGRheU9mV2Vla0opIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJChcIiNiZC10YWJsZS1kYXlzLVwiICsgZWxlbWVudElEICsgXCIgLnRyLTFcIikuYXBwZW5kKCQoJzx0ZD4nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogXCJiZC1lbXB0eS1jZWxsXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBqKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA8IDcgJiYgZGF5SW5kZXggPD0gbnVtYmVyT2ZEYXlzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBURCA9ICc8dGQ+JyArICc8YnV0dG9uIGNsYXNzPVwiZGF5IGRheS0nICsgZGF5SW5kZXggKyAnXCIgdHlwZT1cImJ1dHRvblwiPicgKyAob3B0aW9ucy5mb3JjZUZhcnNpRGlnaXRzID8gRkFfTlVNU1tkYXlJbmRleF0gOiBkYXlJbmRleCkgKyAnPC9idXR0b24+JyArICc8L3RkPic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1hcmsgdG9kYXlzIGRheSBieSBhZGRpbmcgLmJkLXRvZGF5IGNsYXNzXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMubWFya1RvZGF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXlJbmRleCA9PSB0b2RheXNEYXkgJiYgdG9kYXlzTW9udGggPT0gc2VsZWN0ZWRNb250aCAmJiB0b2RheXNZZWFyID09IHNlbGVjdGVkWWVhcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkeCA9IHRlbXBURC5pbmRleE9mKCdkYXkgZGF5LScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFREID0gdGVtcFRELnNsaWNlKDAsIGlkeCkgKyAnIGJkLXRvZGF5ICcgKyB0ZW1wVEQuc2xpY2UoaWR4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbWFyayBob2xpZGF5cyBieSBhZGRpbmcgLmJkLWhvbGlkYXkgY2xhc3NcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5tYXJrSG9saWRheXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT0gNikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkeCA9IHRlbXBURC5pbmRleE9mKCdkYXkgZGF5LScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFREID0gdGVtcFRELnNsaWNlKDAsIGlkeCkgKyAnIGJkLWhvbGlkYXkgJyArIHRlbXBURC5zbGljZShpZHgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAkKFwiI2JkLXRhYmxlLWRheXMtXCIgKyBlbGVtZW50SUQgKyBcIiAudHItXCIgKyByb3dJbmRleCkuYXBwZW5kKHRlbXBURCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRheUluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcm93SW5kZXgrKztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmhpZ2hsaWdodFNlbGVjdGVkRGF5KSB7XHJcbiAgICAgICAgICAgIHZhciBpbnB1dFZhbHVlID0gaW5wdXRFbGVtZW50LnZhbCgpO1xyXG4gICAgICAgICAgICBpbnB1dFZhbHVlID0gaW5wdXRWYWx1ZS5zcGxpdChcIi9cIik7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dFZhbHVlWzBdID09IHNlbGVjdGVkWWVhciAmJiBpbnB1dFZhbHVlWzFdID09IHNlbGVjdGVkTW9udGgpIHtcclxuICAgICAgICAgICAgICAgIG1haW5EaXYuZmluZChcIi5iZC1zZWxlY3RlZC1kYXlcIikucmVtb3ZlQ2xhc3MoXCJiZC1zZWxlY3RlZC1kYXlcIik7XHJcbiAgICAgICAgICAgICAgICBtYWluRGl2LmZpbmQoXCIuZGF5LVwiICsgcGFyc2VJbnQoaW5wdXRWYWx1ZVsyXSkpLmFkZENsYXNzKFwiYmQtc2VsZWN0ZWQtZGF5XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBpbnB1dEVsZW1lbnQucGFyZW50KCkub24oXCJjbGlja1wiLCBcImJ1dHRvbi5kYXlcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBkYXRlc3RyID0gc2VsZWN0ZWRZZWFyICsgXCIvXCIgKyBzZWxlY3RlZE1vbnRoICsgXCIvXCIgKyAkKHRoaXMpLmF0dHIoJ2NsYXNzJykuc3BsaXQoXCIgXCIpWyQodGhpcykuYXR0cignY2xhc3MnKS5zcGxpdChcIiBcIikuaW5kZXhPZignZGF5JykgKyAxXS5zcGxpdChcIi1cIilbMV07XHJcbiAgICAgICAgaWYgKG9wdGlvbnMudHdvZGlnaXQpIHtcclxuICAgICAgICAgICAgZGF0ZXN0ciA9IGZpeERhdGUoZGF0ZXN0cik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlucHV0RWxlbWVudC52YWwoZGF0ZXN0cik7XHJcbiAgICAgICAgaW5wdXRFbGVtZW50LnRyaWdnZXIoXCJjaGFuZ2VcIik7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuY2xvc2VBZnRlclNlbGVjdCkge1xyXG4gICAgICAgICAgICBpc0NhbENsaWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgaW5wdXRFbGVtZW50LnRyaWdnZXIoXCJibHVyXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaGlnaGxpZ2h0U2VsZWN0ZWREYXkpIHtcclxuICAgICAgICAgICAgbWFpbkRpdi5maW5kKFwiLmJkLXNlbGVjdGVkLWRheVwiKS5yZW1vdmVDbGFzcyhcImJkLXNlbGVjdGVkLWRheVwiKTtcclxuICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcyhcImJkLXNlbGVjdGVkLWRheVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBuZXh0TW9udGgub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIm1vbnRoOiBcIiArIHNlbGVjdGVkTW9udGggKyBcIiwgeWVhcjogXCIgKyBzZWxlY3RlZFllYXIpO1xyXG4gICAgICAgIGlmIChtb250aERyb3Bkb3duLnZhbCgpIDwgMTIpIHtcclxuICAgICAgICAgICAgbW9udGhEcm9wZG93bi52YWwocGFyc2VJbnQobW9udGhEcm9wZG93bi52YWwoKSkgKyAxKTtcclxuICAgICAgICAgICAgbW9udGhEcm9wZG93bi50cmlnZ2VyKFwiY2hhbmdlXCIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG1vbnRoRHJvcGRvd24udmFsKDEpO1xyXG4gICAgICAgICAgICBtb250aERyb3Bkb3duLnRyaWdnZXIoXCJjaGFuZ2VcIik7XHJcbiAgICAgICAgICAgIHllYXJEcm9wZG93bi52YWwocGFyc2VJbnQoeWVhckRyb3Bkb3duLnZhbCgpKSArIDEpO1xyXG4gICAgICAgICAgICB5ZWFyRHJvcGRvd24udHJpZ2dlcihcImNoYW5nZVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBwcmV2TW9udGgub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKG1vbnRoRHJvcGRvd24udmFsKCkgPiAxKSB7XHJcbiAgICAgICAgICAgIG1vbnRoRHJvcGRvd24udmFsKHBhcnNlSW50KG1vbnRoRHJvcGRvd24udmFsKCkpIC0gMSk7XHJcbiAgICAgICAgICAgIG1vbnRoRHJvcGRvd24udHJpZ2dlcihcImNoYW5nZVwiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBtb250aERyb3Bkb3duLnZhbCgxMik7XHJcbiAgICAgICAgICAgIG1vbnRoRHJvcGRvd24udHJpZ2dlcihcImNoYW5nZVwiKTtcclxuICAgICAgICAgICAgeWVhckRyb3Bkb3duLnZhbChwYXJzZUludCh5ZWFyRHJvcGRvd24udmFsKCkpIC0gMSk7XHJcbiAgICAgICAgICAgIHllYXJEcm9wZG93bi50cmlnZ2VyKFwiY2hhbmdlXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChvcHRpb25zLmdvdG9Ub2RheSkge1xyXG4gICAgICAgIGdvdG9Ub2RheS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbW9udGhEcm9wZG93bi52YWwodG9kYXlzTW9udGgpO1xyXG4gICAgICAgICAgICBtb250aERyb3Bkb3duLnRyaWdnZXIoXCJjaGFuZ2VcIik7XHJcbiAgICAgICAgICAgIHllYXJEcm9wZG93bi52YWwodG9kYXlzWWVhcik7XHJcbiAgICAgICAgICAgIHllYXJEcm9wZG93bi50cmlnZ2VyKFwiY2hhbmdlXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGRyYXdEYXlzKG51bWJlck9mRGF5cywgZGF5T2ZXZWVrSik7XHJcblxyXG4gICAgLy8gZW5hYmxlIGJvb3RzdHJhcCB0b29sdGlwIGlmIGJvb3RzdHJhcCBpcyBsb2FkZWRcclxuICAgIGlmICh0eXBlb2YgJCgpLm1vZGFsID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAkKCdbZGF0YS10b2dnbGU9XCJ0b29sdGlwXCJdJykudG9vbHRpcCgpO1xyXG4gICAgfVxyXG59O1xyXG5cclxudmFyIG1lZGlhX3htID0gd2luZG93Lm1hdGNoTWVkaWEoXCIobWF4LXdpZHRoOiA1NzUuOThweClcIik7XHJcbnZhciBtZWRpYV9zbSA9IHdpbmRvdy5tYXRjaE1lZGlhKFwiKG1pbi13aWR0aDogNTc2cHgpIGFuZCAobWF4LXdpZHRoOiA3NjcuOThweClcIik7XHJcbnZhciBtZWRpYV9tZCA9IHdpbmRvdy5tYXRjaE1lZGlhKFwiKG1pbi13aWR0aDogNzY4cHgpIGFuZCAobWF4LXdpZHRoOiA5OTEuOThweClcIik7XHJcbnZhciBtZWRpYV9sZyA9IHdpbmRvdy5tYXRjaE1lZGlhKFwiKG1pbi13aWR0aDogOTkycHgpIGFuZCAobWF4LXdpZHRoOiAxMTk5Ljk4cHgpXCIpO1xyXG52YXIgbWVkaWFfeGwgPSB3aW5kb3cubWF0Y2hNZWRpYShcIihtaW4td2lkdGg6IDEyMDBweClcIik7XHJcblxyXG5mdW5jdGlvbiBldmVudF9tZWRpYV94bShtZWRpYSkge1xyXG4gICAgaWYgKG1lZGlhLm1hdGNoZXMpIHJldHVybiAkKGRvY3VtZW50KS50cmlnZ2VyKCdtZWRpYTp4bScsIFttZWRpYV0pO2Vsc2UgcmV0dXJuICQoZG9jdW1lbnQpLnRyaWdnZXIoJ21lZGlhOnhtOmV4aXQnLCBbbWVkaWFdKTtcclxufVxyXG5mdW5jdGlvbiBldmVudF9tZWRpYV9zbShtZWRpYSkge1xyXG4gICAgaWYgKG1lZGlhLm1hdGNoZXMpIHJldHVybiAkKGRvY3VtZW50KS50cmlnZ2VyKCdtZWRpYTpzbScsIFttZWRpYV0pO2Vsc2UgcmV0dXJuICQoZG9jdW1lbnQpLnRyaWdnZXIoJ21lZGlhOnNtOmV4aXQnLCBbbWVkaWFdKTtcclxufVxyXG5mdW5jdGlvbiBldmVudF9tZWRpYV9tZChtZWRpYSkge1xyXG4gICAgaWYgKG1lZGlhLm1hdGNoZXMpIHJldHVybiAkKGRvY3VtZW50KS50cmlnZ2VyKCdtZWRpYTptZCcsIFttZWRpYV0pO2Vsc2UgcmV0dXJuICQoZG9jdW1lbnQpLnRyaWdnZXIoJ21lZGlhOm1kOmV4aXQnLCBbbWVkaWFdKTtcclxufVxyXG5mdW5jdGlvbiBldmVudF9tZWRpYV9sZyhtZWRpYSkge1xyXG4gICAgaWYgKG1lZGlhLm1hdGNoZXMpIHJldHVybiAkKGRvY3VtZW50KS50cmlnZ2VyKCdtZWRpYTpsZycsIFttZWRpYV0pO2Vsc2UgcmV0dXJuICQoZG9jdW1lbnQpLnRyaWdnZXIoJ21lZGlhOmxnOmV4aXQnLCBbbWVkaWFdKTtcclxufVxyXG5mdW5jdGlvbiBldmVudF9tZWRpYV94bChtZWRpYSkge1xyXG4gICAgaWYgKG1lZGlhLm1hdGNoZXMpIHJldHVybiAkKGRvY3VtZW50KS50cmlnZ2VyKCdtZWRpYTp4bCcsIFttZWRpYV0pO2Vsc2UgcmV0dXJuICQoZG9jdW1lbnQpLnRyaWdnZXIoJ21lZGlhOnhsOmV4aXQnLCBbbWVkaWFdKTtcclxufVxyXG5cclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgZXZlbnRfbWVkaWFfeG0obWVkaWFfeG0pO1xyXG4gICAgbWVkaWFfeG0uYWRkTGlzdGVuZXIoZXZlbnRfbWVkaWFfeG0pO1xyXG5cclxuICAgIGV2ZW50X21lZGlhX3NtKG1lZGlhX3NtKTtcclxuICAgIG1lZGlhX3NtLmFkZExpc3RlbmVyKGV2ZW50X21lZGlhX3NtKTtcclxuXHJcbiAgICBldmVudF9tZWRpYV9tZChtZWRpYV9tZCk7XHJcbiAgICBtZWRpYV9tZC5hZGRMaXN0ZW5lcihldmVudF9tZWRpYV9tZCk7XHJcblxyXG4gICAgZXZlbnRfbWVkaWFfbGcobWVkaWFfbGcpO1xyXG4gICAgbWVkaWFfbGcuYWRkTGlzdGVuZXIoZXZlbnRfbWVkaWFfbGcpO1xyXG5cclxuICAgIGV2ZW50X21lZGlhX3hsKG1lZGlhX3hsKTtcclxuICAgIG1lZGlhX3hsLmFkZExpc3RlbmVyKGV2ZW50X21lZGlhX3hsKTtcclxufSk7XHJcblxyXG5mdW5jdGlvbiByZXNwb25zaXZlX21lbnUoKSB7XHJcbiAgICAkKCcjbWVudScpLnJlbW92ZUNsYXNzKCdkLW5vbmUnKS5hZGRDbGFzcygnZC1mbGV4Jyk7XHJcbiAgICAvLyAkKCcjZGVza3RvcCcpLnJlbW92ZUNsYXNzKCdkLW5vbmUnKTtcclxuICAgICQoJ2JvZHknKS5hZGRDbGFzcygncmVzcG9uc2l2ZS1tZW51Jyk7XHJcbiAgICAkKCcjYnRuLW1lbnUnKS5maW5kKCQoXCIuZmFzXCIpKS5yZW1vdmVDbGFzcygnZmEtYmFycycpLmFkZENsYXNzKCdmYS1hcnJvdy1yaWdodCcpO1xyXG4gICAgJCh0aGlzKS5vZmYoJ2NsaWNrLnJlc3BvbnNpdmUtbWVudScpO1xyXG4gICAgJCh0aGlzKS5vbignY2xpY2suY2xvc2UtcmVzcG9uc2l2ZS1tZW51JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQodGhpcykub2ZmKCdjbGljay5jbG9zZS1yZXNwb25zaXZlLW1lbnUnKTtcclxuICAgICAgICAkKHRoaXMpLm9uKCdjbGljay5yZXNwb25zaXZlLW1lbnUnLCByZXNwb25zaXZlX21lbnUpO1xyXG4gICAgICAgICQoJyNtZW51JykuYWRkQ2xhc3MoJ2Qtbm9uZScpLnJlbW92ZUNsYXNzKCdkLWZsZXgnKTtcclxuICAgICAgICAvLyAkKCcjZGVza3RvcCcpLmFkZENsYXNzKCdkLW5vbmUnKTtcclxuICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ3Jlc3BvbnNpdmUtbWVudScpO1xyXG4gICAgICAgICQoJyNidG4tbWVudScpLmZpbmQoJChcIi5mYXNcIikpLnJlbW92ZUNsYXNzKCdmYS1hcnJvdy1yaWdodCcpLmFkZENsYXNzKCdmYS1iYXJzJyk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuJChkb2N1bWVudCkub24oJ21lZGlhOnhtIG1lZGlhOnNtJywgZnVuY3Rpb24gKGV2ZW50LCBtZWRpYSkge1xyXG4gICAgJChcImJvZHk6bm90KC5yZXNwb25zaXZlLW1lbnUpICNidG4tbWVudVwiKS5vbignY2xpY2sucmVzcG9uc2l2ZS1tZW51JywgcmVzcG9uc2l2ZV9tZW51KTtcclxuXHJcbiAgICB2YXIgbWVudSA9ICQoJyNtZW51Jyk7XHJcbiAgICB2YXIgZGVza3RvcCA9ICQoJyNkZXNrdG9wJyk7XHJcbiAgICB2YXIgYnRuX21lbnUgPSAkKCcjYnRuLW1lbnUnKTtcclxuICAgICQoZG9jdW1lbnQpLm1vdXNldXAoZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBpZiAoIW1lbnUuaXMoZS50YXJnZXQpICYmIG1lbnUuaGFzKGUudGFyZ2V0KS5sZW5ndGggPT09IDAgJiYgIWRlc2t0b3AuaXMoZS50YXJnZXQpICYmIGRlc2t0b3AuaGFzKGUudGFyZ2V0KS5sZW5ndGggPT09IDAgJiYgIWJ0bl9tZW51LmlzKGUudGFyZ2V0KSAmJiBidG5fbWVudS5oYXMoZS50YXJnZXQpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAkKFwiYm9keS5yZXNwb25zaXZlLW1lbnUgI2J0bi1tZW51XCIpLnRyaWdnZXIoJ2NsaWNrLmNsb3NlLXJlc3BvbnNpdmUtbWVudScpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vICQoXCJib2R5XCIpLnN3aXBlKHtcclxuICAgIC8vICAgICBzd2lwZTogZnVuY3Rpb24oZXZlbnQsIGRpcmVjdGlvbiwgZGlzdGFuY2UsIGR1cmF0aW9uLCBmaW5nZXJDb3VudCwgZmluZ2VyRGF0YSkge1xyXG4gICAgLy8gICAgICAgICBpZiAoZGlyZWN0aW9uID09ICdsZWZ0Jykge1xyXG4gICAgLy8gICAgICAgICAgICAgJChcImJvZHk6bm90KC5yZXNwb25zaXZlLW1lbnUpICNidG4tbWVudVwiKS50cmlnZ2VyKCdjbGljay5yZXNwb25zaXZlLW1lbnUnKTtcclxuICAgIC8vICAgICAgICAgfVxyXG5cclxuICAgIC8vICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PSAncmlnaHQnKSB7XHJcbiAgICAvLyAgICAgICAgICAgICAkKFwiYm9keS5yZXNwb25zaXZlLW1lbnUgI2J0bi1tZW51XCIpLnRyaWdnZXIoJ2NsaWNrLmNsb3NlLXJlc3BvbnNpdmUtbWVudScpO1xyXG4gICAgLy8gICAgICAgICB9XHJcblxyXG4gICAgLy8gICAgICAgICBpZiAoZGlyZWN0aW9uID09ICd1cCcgfHwgZGlyZWN0aW9uID09ICdkb3duJykge1xyXG4gICAgLy8gICAgICAgICAgICAgaWYgKCFtZW51LmlzKGV2ZW50LnRhcmdldCkgJiYgbWVudS5oYXMoZXZlbnQudGFyZ2V0KS5sZW5ndGggPT09IDApIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICAkKFwiYm9keS5yZXNwb25zaXZlLW1lbnUgI2J0bi1tZW51XCIpLnRyaWdnZXIoJ2NsaWNrLmNsb3NlLXJlc3BvbnNpdmUtbWVudScpO1xyXG4gICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfSk7XHJcbn0pO1xyXG5cclxuJChkb2N1bWVudCkub24oJ21lZGlhOm1kIG1lZGlhOmxnIG1lZGlhOnhsJywgZnVuY3Rpb24gKGV2ZW50LCBtZWRpYSkge1xyXG4gICAgJChcImJvZHkucmVzcG9uc2l2ZS1tZW51ICNidG4tbWVudVwiKS50cmlnZ2VyKCdjbGljay5jbG9zZS1yZXNwb25zaXZlLW1lbnUnKTtcclxuICAgICQoXCIjYnRuLW1lbnVcIikub2ZmKCdjbGljay5yZXNwb25zaXZlLW1lbnUnKTtcclxuICAgIC8vICQoXCIjYnRuLW1lbnVcIikub2ZmKCdjbGljay5jbG9zZS1yZXNwb25zaXZlLW1lbnUnKTtcclxuICAgIC8vICQoJyNtZW51JykuYWRkQ2xhc3MoJ2Qtbm9uZScpLnJlbW92ZUNsYXNzKCdkLWZsZXgnKTtcclxuICAgIC8vICQoJyNkZXNrdG9wJykuYWRkQ2xhc3MoJ2Qtbm9uZScpO1xyXG4gICAgLy8gJCgnYm9keScpLnJlbW92ZUNsYXNzKCdyZXNwb25zaXZlLW1lbnUnKTtcclxuICAgIC8vICQoJyNidG4tbWVudScpLmZpbmQoJChcIi5mYXNcIikpLnJlbW92ZUNsYXNzKCdmYS1hcnJvdy1yaWdodCcpLmFkZENsYXNzKCdmYS1iYXJzJyk7XHJcbn0pO1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVml3RmlsZSgpIHtcclxuICAgICAgICAkKCcuY3VzdG9tLWZpbGUtaW5wdXQnLCB0aGlzKS5vbignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIXdpbmRvdy5GaWxlICYmICF3aW5kb3cuRmlsZVJlYWRlciAmJiAhd2luZG93LkZpbGVMaXN0ICYmICF3aW5kb3cuQmxvYikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmlsZVJlYWRlciB1bnN1cHBvcnRlZCEnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgZmlsZV9pbmRleCA9IDA7XHJcbiAgICAgICAgICAgIHZhciBmaWxlO1xyXG4gICAgICAgICAgICAkKHRoaXMpLm5leHQoKS5odG1sKCcnKTtcclxuICAgICAgICAgICAgdmFyIGZpbGVzID0gW107XHJcbiAgICAgICAgICAgIHdoaWxlIChmaWxlID0gdGhpcy5maWxlcy5pdGVtKGZpbGVfaW5kZXgrKykpIHtcclxuICAgICAgICAgICAgICAgIGZpbGVzLnB1c2goZmlsZS5uYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkKHRoaXMpLm5leHQoKS5odG1sKGZpbGVzLmpvaW4oJyA6ICcpKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgICQoZG9jdW1lbnQpLm9uKCdzdGF0aW86Z2xvYmFsOnJlbmRlclJlc3BvbnNlJywgZnVuY3Rpb24gKGV2ZW50LCBiYXNlLCBjb250ZXgpIHtcclxuICAgICAgICBiYXNlLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBWaXdGaWxlLmNhbGwodGhpcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIFZpd0ZpbGUuY2FsbChkb2N1bWVudCk7XHJcbn0pKCk7Il19